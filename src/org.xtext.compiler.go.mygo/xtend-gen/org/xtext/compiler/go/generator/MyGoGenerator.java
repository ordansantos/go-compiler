/**
 * generated by Xtext 2.14.0
 */
package org.xtext.compiler.go.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.compiler.go.myGo.Assignment;
import org.xtext.compiler.go.myGo.Declarations;
import org.xtext.compiler.go.myGo.Expression;
import org.xtext.compiler.go.myGo.ForRange;
import org.xtext.compiler.go.myGo.FuncCall;
import org.xtext.compiler.go.myGo.FunctionDeclaration;
import org.xtext.compiler.go.myGo.IdType;
import org.xtext.compiler.go.myGo.LineCommand;
import org.xtext.compiler.go.myGo.Model;
import org.xtext.compiler.go.myGo.ParametersDeclaration;
import org.xtext.compiler.go.myGo.Receiver;
import org.xtext.compiler.go.myGo.ReceiverInstance;
import org.xtext.compiler.go.myGo.ReturnStatement;
import org.xtext.compiler.go.myGo.Value;
import org.xtext.compiler.go.myGo.Variable;
import org.xtext.compiler.go.myGo.VariableDeclaration;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyGoGenerator extends AbstractGenerator {
  private String out = "";
  
  private static int PAD = 5;
  
  private static int SP = 0;
  
  private static int ALLOC = 4;
  
  private Map<String, Integer> sps;
  
  private static int PC = 8;
  
  private Map<String, Integer> functionPC;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Model model = ((Model) _head);
    this.out = "";
    MyGoGenerator.SP = 4;
    HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
    this.sps = _hashMap;
    MyGoGenerator.PC = 8;
    HashMap<String, Integer> _hashMap_1 = new HashMap<String, Integer>();
    this.functionPC = _hashMap_1;
    int pcmain = 8;
    EList<Declarations> _declarations = model.getDeclarations();
    for (final Declarations declarations : _declarations) {
      FunctionDeclaration _functionDeclaration = declarations.getFunctionDeclaration();
      boolean _tripleNotEquals = (_functionDeclaration != null);
      if (_tripleNotEquals) {
        String _id = declarations.getFunctionDeclaration().getId();
        boolean _equals = Objects.equal(_id, "main");
        if (_equals) {
          pcmain = MyGoGenerator.PC;
        }
        MyGoGenerator.SP = 4;
        this.sps.clear();
        this.functionPC.put(declarations.getFunctionDeclaration().getId(), Integer.valueOf(MyGoGenerator.PC));
        Receiver _receiver = declarations.getFunctionDeclaration().getReceiver();
        boolean _tripleNotEquals_1 = (_receiver != null);
        if (_tripleNotEquals_1) {
          int _SP = MyGoGenerator.SP;
          MyGoGenerator.SP = (_SP + 4);
          this.sps.put(declarations.getFunctionDeclaration().getReceiver().getIdName(), Integer.valueOf(MyGoGenerator.SP));
        }
        ParametersDeclaration _parameters = declarations.getFunctionDeclaration().getParameters();
        boolean _tripleNotEquals_2 = (_parameters != null);
        if (_tripleNotEquals_2) {
          EList<IdType> _idType = declarations.getFunctionDeclaration().getParameters().getIdType();
          for (final IdType idType : _idType) {
            {
              int _SP_1 = MyGoGenerator.SP;
              MyGoGenerator.SP = (_SP_1 + 4);
              this.sps.put(idType.getId(), Integer.valueOf(MyGoGenerator.SP));
            }
          }
        }
        this.compileLineCommand(declarations.getFunctionDeclaration().getBody().getLineCommand());
        String _rightPadding = this.rightPadding("BR");
        String _plus = (_rightPadding + "*0(SP)");
        this.addCommand(_plus);
        String _id_1 = declarations.getFunctionDeclaration().getId();
        boolean _equals_1 = Objects.equal(_id_1, "main");
        if (_equals_1) {
          this.addCommand(this.rightPadding("halt"));
        }
        String _out = this.out;
        this.out = (_out + "\n");
      }
    }
    String s2 = Integer.toString(0);
    while ((s2.length() < 4)) {
      s2 = ("0" + s2);
    }
    String _rightPadding_1 = this.rightPadding("BR");
    String _plus_1 = ((s2 + "  ") + _rightPadding_1);
    String _plus_2 = (_plus_1 + Integer.valueOf(pcmain));
    String branchCommand = (_plus_2 + "\n");
    this.out = (branchCommand + this.out);
    this.addCommand(this.rightPadding("halt"));
    fsa.generateFile("assembly_go.txt", this.out);
  }
  
  public void compileLineCommand(final EList<LineCommand> lineCommand) {
    for (final LineCommand command : lineCommand) {
      {
        if ((command instanceof Assignment)) {
          Expression e = ((Assignment)command).getExpression();
          int expressionRegister = this.compile(e);
          this.ST(((Assignment)command).getId(), expressionRegister);
        } else {
          if ((command instanceof VariableDeclaration)) {
            Expression _expression = ((VariableDeclaration)command).getExpression();
            boolean _tripleNotEquals = (_expression != null);
            if (_tripleNotEquals) {
              Expression e_1 = ((VariableDeclaration)command).getExpression();
              int expressionRegister_1 = this.compile(e_1);
              EList<String> _ids = ((VariableDeclaration)command).getIds();
              for (final String id : _ids) {
                this.ST(id, expressionRegister_1);
              }
            } else {
              EList<String> _ids_1 = ((VariableDeclaration)command).getIds();
              for (final String id_1 : _ids_1) {
                boolean _containsKey = this.sps.containsKey(id_1);
                boolean _not = (!_containsKey);
                if (_not) {
                  int _SP = MyGoGenerator.SP;
                  MyGoGenerator.SP = (_SP + 4);
                  this.sps.put(id_1, Integer.valueOf(MyGoGenerator.SP));
                }
              }
            }
          } else {
            if ((command instanceof ReturnStatement)) {
              int spExpression = this.compile(((ReturnStatement)command).getExpression());
              String _rightPadding = this.rightPadding("LD");
              String _plus = (_rightPadding + "R0, ");
              String _sPValue = this.getSPValue(spExpression);
              String _plus_1 = (_plus + _sPValue);
              this.addCommand(_plus_1);
              String _rightPadding_1 = this.rightPadding("ST");
              String _sPValue_1 = this.getSPValue(4);
              String _plus_2 = (_rightPadding_1 + _sPValue_1);
              String _plus_3 = (_plus_2 + ", R0");
              this.addCommand(_plus_3);
              String _rightPadding_2 = this.rightPadding("BR");
              String _plus_4 = (_rightPadding_2 + "*0(SP)");
              this.addCommand(_plus_4);
            } else {
              if ((command instanceof FuncCall)) {
                ArrayList<Integer> commands = new ArrayList<Integer>();
                int receiverSp = (-1);
                ReceiverInstance _receiverInstance = ((FuncCall)command).getReceiverInstance();
                boolean _tripleNotEquals_1 = (_receiverInstance != null);
                if (_tripleNotEquals_1) {
                  receiverSp = (this.sps.get(((FuncCall)command).getReceiverInstance().getId())).intValue();
                }
                int paramCounter = 4;
                EList<Expression> _expression_1 = ((FuncCall)command).getParametersValues().getExpression();
                for (final Expression expressionParameter : _expression_1) {
                  {
                    int spExpression_1 = this.compile(expressionParameter);
                    commands.add(Integer.valueOf(spExpression_1));
                  }
                }
                String _rightPadding_3 = this.rightPadding("ADD");
                String _plus_5 = (_rightPadding_3 + "SP, SP, #");
                String _plus_6 = (_plus_5 + Integer.valueOf((MyGoGenerator.SP + 4)));
                this.addCommand(_plus_6);
                if ((receiverSp != (-1))) {
                  int _paramCounter = paramCounter;
                  paramCounter = (_paramCounter + 4);
                  String _rightPadding_4 = this.rightPadding("LD");
                  String _plus_7 = (_rightPadding_4 + "R0, ");
                  String _sPValue_2 = this.getSPValue(((receiverSp - MyGoGenerator.SP) - 4));
                  String _plus_8 = (_plus_7 + _sPValue_2);
                  this.addCommand(_plus_8);
                  String _rightPadding_5 = this.rightPadding("ST");
                  String _sPValue_3 = this.getSPValue(paramCounter);
                  String _plus_9 = (_rightPadding_5 + _sPValue_3);
                  String _plus_10 = (_plus_9 + ", R0");
                  this.addCommand(_plus_10);
                }
                for (final Integer sp : commands) {
                  {
                    String _out = this.out;
                    this.out = (_out + "\n");
                    int _paramCounter_1 = paramCounter;
                    paramCounter = (_paramCounter_1 + 4);
                    String _rightPadding_6 = this.rightPadding("LD");
                    String _plus_11 = (_rightPadding_6 + "R0, ");
                    String _sPValue_4 = this.getSPValue((((sp).intValue() - MyGoGenerator.SP) - 4));
                    String _plus_12 = (_plus_11 + _sPValue_4);
                    this.addCommand(_plus_12);
                    String _rightPadding_7 = this.rightPadding("ST");
                    String _sPValue_5 = this.getSPValue(paramCounter);
                    String _plus_13 = (_rightPadding_7 + _sPValue_5);
                    String _plus_14 = (_plus_13 + ", R0");
                    this.addCommand(_plus_14);
                  }
                }
                String _rightPadding_6 = this.rightPadding("ST");
                String _plus_11 = (_rightPadding_6 + "*SP, ");
                String _plus_12 = (_plus_11 + Integer.valueOf((MyGoGenerator.PC + 16)));
                this.addCommand(_plus_12);
                String _rightPadding_7 = this.rightPadding("BR");
                Integer _get = this.functionPC.get(((FuncCall)command).getId());
                String _plus_13 = (_rightPadding_7 + _get);
                this.addCommand(_plus_13);
                String _rightPadding_8 = this.rightPadding("SUB");
                String _plus_14 = (_rightPadding_8 + "SP, SP, #");
                String _plus_15 = (_plus_14 + Integer.valueOf((MyGoGenerator.SP + 4)));
                this.addCommand(_plus_15);
              } else {
                if ((command instanceof ForRange)) {
                  int before = (-1);
                  boolean _containsKey_1 = this.sps.containsKey(((ForRange)command).getId1());
                  if (_containsKey_1) {
                    before = (this.sps.get(((ForRange)command).getId1())).intValue();
                  }
                  int _SP_1 = MyGoGenerator.SP;
                  MyGoGenerator.SP = (_SP_1 + 4);
                  this.sps.put(((ForRange)command).getId1(), Integer.valueOf(MyGoGenerator.SP));
                  int spi = MyGoGenerator.SP;
                  int spn = this.compile(((ForRange)command).getExpression());
                  String _rightPadding_9 = this.rightPadding("ST");
                  String _sPValue_4 = this.getSPValue(spi);
                  String _plus_16 = (_rightPadding_9 + _sPValue_4);
                  String _plus_17 = (_plus_16 + ", #");
                  String _plus_18 = (_plus_17 + Integer.valueOf(0));
                  this.addCommand(_plus_18);
                  int begin = MyGoGenerator.PC;
                  String _rightPadding_10 = this.rightPadding("LD");
                  String _plus_19 = (_rightPadding_10 + "R0, ");
                  String _sPValue_5 = this.getSPValue(spi);
                  String _plus_20 = (_plus_19 + _sPValue_5);
                  this.addCommand(_plus_20);
                  String _rightPadding_11 = this.rightPadding("LD");
                  String _plus_21 = (_rightPadding_11 + "R1, ");
                  String _sPValue_6 = this.getSPValue(spn);
                  String _plus_22 = (_plus_21 + _sPValue_6);
                  this.addCommand(_plus_22);
                  String _rightPadding_12 = this.rightPadding("SUB");
                  String _plus_23 = (_rightPadding_12 + "R0, R0, R1");
                  this.addCommand(_plus_23);
                  int pcAtual = MyGoGenerator.PC;
                  String outAtual = this.out;
                  this.out = "";
                  this.compileLineCommand(((ForRange)command).getLineCommand());
                  String _rightPadding_13 = this.rightPadding("LD");
                  String _plus_24 = (_rightPadding_13 + "R0, ");
                  String _sPValue_7 = this.getSPValue(spi);
                  String _plus_25 = (_plus_24 + _sPValue_7);
                  this.addCommand(_plus_25);
                  String _rightPadding_14 = this.rightPadding("ADD");
                  String _plus_26 = (_rightPadding_14 + "R0, R0, #1");
                  this.addCommand(_plus_26);
                  String _rightPadding_15 = this.rightPadding("ST");
                  String _sPValue_8 = this.getSPValue(spi);
                  String _plus_27 = (_rightPadding_15 + _sPValue_8);
                  String _plus_28 = (_plus_27 + ", R0");
                  this.addCommand(_plus_28);
                  String _rightPadding_16 = this.rightPadding("BR");
                  String _plus_29 = (_rightPadding_16 + Integer.valueOf(begin));
                  this.addCommand(_plus_29);
                  if ((before != (-1))) {
                    this.sps.put(((ForRange)command).getId1(), Integer.valueOf(before));
                  }
                  String s2 = Integer.toString(pcAtual);
                  while ((s2.length() < 4)) {
                    s2 = ("0" + s2);
                  }
                  String _rightPadding_17 = this.rightPadding("BGTZ");
                  String _plus_30 = ((s2 + "  ") + _rightPadding_17);
                  String _plus_31 = (_plus_30 + "R0, ");
                  String _plus_32 = (_plus_31 + Integer.valueOf(MyGoGenerator.PC));
                  String branchCommand = (_plus_32 + "\n");
                  this.out = ((outAtual + branchCommand) + this.out);
                }
              }
            }
          }
        }
        String _out = this.out;
        this.out = (_out + "\n");
      }
    }
  }
  
  public int compile(final Expression e) {
    if ((e instanceof Value)) {
      return this.LD(((Value)e));
    } else {
      if ((e instanceof Variable)) {
        return this.LD(((Variable)e));
      } else {
        if ((e instanceof FuncCall)) {
          ArrayList<Integer> commands = new ArrayList<Integer>();
          int receiverSp = (-1);
          ReceiverInstance _receiverInstance = ((FuncCall)e).getReceiverInstance();
          boolean _tripleNotEquals = (_receiverInstance != null);
          if (_tripleNotEquals) {
            receiverSp = (this.sps.get(((FuncCall)e).getReceiverInstance().getId())).intValue();
          }
          int paramCounter = 4;
          EList<Expression> _expression = ((FuncCall)e).getParametersValues().getExpression();
          for (final Expression expressionParameter : _expression) {
            {
              int spExpression = this.compile(expressionParameter);
              commands.add(Integer.valueOf(spExpression));
            }
          }
          String _rightPadding = this.rightPadding("ADD");
          String _plus = (_rightPadding + "SP, SP, #");
          String _plus_1 = (_plus + Integer.valueOf((MyGoGenerator.SP + 4)));
          this.addCommand(_plus_1);
          if ((receiverSp != (-1))) {
            int _paramCounter = paramCounter;
            paramCounter = (_paramCounter + 4);
            String _rightPadding_1 = this.rightPadding("LD");
            String _plus_2 = (_rightPadding_1 + "R0, ");
            String _sPValue = this.getSPValue(((receiverSp - MyGoGenerator.SP) - 4));
            String _plus_3 = (_plus_2 + _sPValue);
            this.addCommand(_plus_3);
            String _rightPadding_2 = this.rightPadding("ST");
            String _sPValue_1 = this.getSPValue(paramCounter);
            String _plus_4 = (_rightPadding_2 + _sPValue_1);
            String _plus_5 = (_plus_4 + ", R0");
            this.addCommand(_plus_5);
          }
          for (final Integer sp : commands) {
            {
              String _out = this.out;
              this.out = (_out + "\n");
              int _paramCounter_1 = paramCounter;
              paramCounter = (_paramCounter_1 + 4);
              String _rightPadding_3 = this.rightPadding("LD");
              String _plus_6 = (_rightPadding_3 + "R0, ");
              String _sPValue_2 = this.getSPValue((((sp).intValue() - MyGoGenerator.SP) - 4));
              String _plus_7 = (_plus_6 + _sPValue_2);
              this.addCommand(_plus_7);
              String _rightPadding_4 = this.rightPadding("ST");
              String _sPValue_3 = this.getSPValue(paramCounter);
              String _plus_8 = (_rightPadding_4 + _sPValue_3);
              String _plus_9 = (_plus_8 + ", R0");
              this.addCommand(_plus_9);
            }
          }
          String _rightPadding_3 = this.rightPadding("ST");
          String _plus_6 = (_rightPadding_3 + "*SP, ");
          String _plus_7 = (_plus_6 + Integer.valueOf((MyGoGenerator.PC + 16)));
          this.addCommand(_plus_7);
          String _rightPadding_4 = this.rightPadding("BR");
          Integer _get = this.functionPC.get(((FuncCall)e).getId());
          String _plus_8 = (_rightPadding_4 + _get);
          this.addCommand(_plus_8);
          String _rightPadding_5 = this.rightPadding("LD");
          String _plus_9 = (_rightPadding_5 + "R0, ");
          String _sPValue_2 = this.getSPValue(4);
          String _plus_10 = (_plus_9 + _sPValue_2);
          this.addCommand(_plus_10);
          String _rightPadding_6 = this.rightPadding("SUB");
          String _plus_11 = (_rightPadding_6 + "SP, SP, #");
          String _plus_12 = (_plus_11 + Integer.valueOf((MyGoGenerator.SP + 4)));
          this.addCommand(_plus_12);
          return this.push();
        } else {
          if ((e instanceof Expression)) {
            int spl = this.compile(e.getLeft());
            int spr = this.compile(e.getRight());
            String op = e.getBinaryOp();
            return this.binaryOperation(spl, spr, op);
          }
        }
      }
    }
    return (-1);
  }
  
  public int LD(final Variable v) {
    return (this.sps.get(v.getId())).intValue();
  }
  
  public int LD(final Value v) {
    return this.push(this.getValue(v));
  }
  
  public int ST(final String variableId, final int sp) {
    int _xblockexpression = (int) 0;
    {
      boolean _containsKey = this.sps.containsKey(variableId);
      boolean _not = (!_containsKey);
      if (_not) {
        int _SP = MyGoGenerator.SP;
        MyGoGenerator.SP = (_SP + 4);
        this.sps.put(variableId, Integer.valueOf(MyGoGenerator.SP));
      }
      String _rightPadding = this.rightPadding("LD");
      String _plus = (_rightPadding + "R0, ");
      String _sPValue = this.getSPValue(sp);
      String _plus_1 = (_plus + _sPValue);
      this.addCommand(_plus_1);
      String _rightPadding_1 = this.rightPadding("ST");
      String _sPValue_1 = this.getSPValue((this.sps.get(variableId)).intValue());
      String _plus_2 = (_rightPadding_1 + _sPValue_1);
      String _plus_3 = (_plus_2 + ", R0");
      _xblockexpression = this.addCommand(_plus_3);
    }
    return _xblockexpression;
  }
  
  public String getValue(final Value v) {
    String _intValue = v.getIntValue();
    boolean _tripleNotEquals = (_intValue != null);
    if (_tripleNotEquals) {
      return v.getIntValue();
    }
    String _floatValue = v.getFloatValue();
    boolean _tripleNotEquals_1 = (_floatValue != null);
    if (_tripleNotEquals_1) {
      return v.getFloatValue();
    }
    String _boolValue = v.getBoolValue();
    boolean _tripleNotEquals_2 = (_boolValue != null);
    if (_tripleNotEquals_2) {
      String _boolValue_1 = v.getBoolValue();
      boolean _equals = Objects.equal(_boolValue_1, "true");
      if (_equals) {
        return "1";
      } else {
        return "0";
      }
    }
    String _stringValue = v.getStringValue();
    boolean _tripleNotEquals_3 = (_stringValue != null);
    if (_tripleNotEquals_3) {
      return v.getStringValue();
    }
    return null;
  }
  
  public int binaryOperation(final int spl, final int spr, final String op) {
    String _rightPadding = this.rightPadding("LD");
    String _plus = (_rightPadding + "R0, ");
    String _sPValue = this.getSPValue(spl);
    String _plus_1 = (_plus + _sPValue);
    this.addCommand(_plus_1);
    String _rightPadding_1 = this.rightPadding("LD");
    String _plus_2 = (_rightPadding_1 + "R1, ");
    String _sPValue_1 = this.getSPValue(spr);
    String _plus_3 = (_plus_2 + _sPValue_1);
    this.addCommand(_plus_3);
    boolean _equals = Objects.equal(op, "+");
    if (_equals) {
      return this.binaryOperationCommand("ADD");
    } else {
      boolean _equals_1 = Objects.equal(op, "*");
      if (_equals_1) {
        return this.binaryOperationCommand("MUL");
      } else {
        boolean _equals_2 = Objects.equal(op, "/");
        if (_equals_2) {
          return this.binaryOperationCommand("DIV");
        } else {
          boolean _equals_3 = Objects.equal(op, "-");
          if (_equals_3) {
            return this.binaryOperationCommand("SUB");
          } else {
            boolean _equals_4 = Objects.equal(op, "%");
            if (_equals_4) {
              return this.binaryOperationCommand("REMW");
            } else {
              boolean _equals_5 = Objects.equal(op, "<");
              if (_equals_5) {
                String _rightPadding_2 = this.rightPadding("LD");
                String _plus_4 = (_rightPadding_2 + "R3, #0");
                this.addCommand(_plus_4);
                String _rightPadding_3 = this.rightPadding("SUB");
                String _plus_5 = (_rightPadding_3 + "R0, R0, R1");
                this.addCommand(_plus_5);
                String _rightPadding_4 = this.rightPadding("BGEZ");
                String _plus_6 = (_rightPadding_4 + "R0 ");
                String _plus_7 = (_plus_6 + Integer.valueOf((MyGoGenerator.PC + 16)));
                this.addCommand(_plus_7);
                String _rightPadding_5 = this.rightPadding("LD");
                String _plus_8 = (_rightPadding_5 + "R3, #1");
                this.addCommand(_plus_8);
                int _SP = MyGoGenerator.SP;
                MyGoGenerator.SP = (_SP + MyGoGenerator.ALLOC);
                String _rightPadding_6 = this.rightPadding("ST");
                String _sPValue_2 = this.getSPValue(MyGoGenerator.SP);
                String _plus_9 = (_rightPadding_6 + _sPValue_2);
                String _plus_10 = (_plus_9 + ", R3");
                this.addCommand(_plus_10);
                return MyGoGenerator.SP;
              } else {
                boolean _equals_6 = Objects.equal(op, "<=");
                if (_equals_6) {
                  String _rightPadding_7 = this.rightPadding("LD");
                  String _plus_11 = (_rightPadding_7 + "R3, #0");
                  this.addCommand(_plus_11);
                  String _rightPadding_8 = this.rightPadding("SUB");
                  String _plus_12 = (_rightPadding_8 + "R0, R0, R1");
                  this.addCommand(_plus_12);
                  String _rightPadding_9 = this.rightPadding("BGTZ");
                  String _plus_13 = (_rightPadding_9 + "R0 ");
                  String _plus_14 = (_plus_13 + Integer.valueOf((MyGoGenerator.PC + 16)));
                  this.addCommand(_plus_14);
                  String _rightPadding_10 = this.rightPadding("LD");
                  String _plus_15 = (_rightPadding_10 + "R3, #1");
                  this.addCommand(_plus_15);
                  int _SP_1 = MyGoGenerator.SP;
                  MyGoGenerator.SP = (_SP_1 + MyGoGenerator.ALLOC);
                  String _rightPadding_11 = this.rightPadding("ST");
                  String _sPValue_3 = this.getSPValue(MyGoGenerator.SP);
                  String _plus_16 = (_rightPadding_11 + _sPValue_3);
                  String _plus_17 = (_plus_16 + ", R3");
                  this.addCommand(_plus_17);
                  return MyGoGenerator.SP;
                } else {
                  boolean _equals_7 = Objects.equal(op, ">");
                  if (_equals_7) {
                    String _rightPadding_12 = this.rightPadding("LD");
                    String _plus_18 = (_rightPadding_12 + "R3, #0");
                    this.addCommand(_plus_18);
                    String _rightPadding_13 = this.rightPadding("SUB");
                    String _plus_19 = (_rightPadding_13 + "R0, R1, R0");
                    this.addCommand(_plus_19);
                    String _rightPadding_14 = this.rightPadding("BGEZ");
                    String _plus_20 = (_rightPadding_14 + "R0 ");
                    String _plus_21 = (_plus_20 + Integer.valueOf((MyGoGenerator.PC + 16)));
                    this.addCommand(_plus_21);
                    String _rightPadding_15 = this.rightPadding("LD");
                    String _plus_22 = (_rightPadding_15 + "R3, #1");
                    this.addCommand(_plus_22);
                    int _SP_2 = MyGoGenerator.SP;
                    MyGoGenerator.SP = (_SP_2 + MyGoGenerator.ALLOC);
                    String _rightPadding_16 = this.rightPadding("ST");
                    String _sPValue_4 = this.getSPValue(MyGoGenerator.SP);
                    String _plus_23 = (_rightPadding_16 + _sPValue_4);
                    String _plus_24 = (_plus_23 + ", R3");
                    this.addCommand(_plus_24);
                    return MyGoGenerator.SP;
                  } else {
                    boolean _equals_8 = Objects.equal(op, ">=");
                    if (_equals_8) {
                      String _rightPadding_17 = this.rightPadding("LD");
                      String _plus_25 = (_rightPadding_17 + "R3, #0");
                      this.addCommand(_plus_25);
                      String _rightPadding_18 = this.rightPadding("SUB");
                      String _plus_26 = (_rightPadding_18 + "R0, R1, R0");
                      this.addCommand(_plus_26);
                      String _rightPadding_19 = this.rightPadding("BGTZ");
                      String _plus_27 = (_rightPadding_19 + "R0 ");
                      String _plus_28 = (_plus_27 + Integer.valueOf((MyGoGenerator.PC + 16)));
                      this.addCommand(_plus_28);
                      String _rightPadding_20 = this.rightPadding("LD");
                      String _plus_29 = (_rightPadding_20 + "R3, #1");
                      this.addCommand(_plus_29);
                      int _SP_3 = MyGoGenerator.SP;
                      MyGoGenerator.SP = (_SP_3 + MyGoGenerator.ALLOC);
                      String _rightPadding_21 = this.rightPadding("ST");
                      String _sPValue_5 = this.getSPValue(MyGoGenerator.SP);
                      String _plus_30 = (_rightPadding_21 + _sPValue_5);
                      String _plus_31 = (_plus_30 + ", R3");
                      this.addCommand(_plus_31);
                      return MyGoGenerator.SP;
                    } else {
                      boolean _equals_9 = Objects.equal(op, "==");
                      if (_equals_9) {
                        String _rightPadding_22 = this.rightPadding("LD");
                        String _plus_32 = (_rightPadding_22 + "R3, #0");
                        this.addCommand(_plus_32);
                        String _rightPadding_23 = this.rightPadding("XOR");
                        String _plus_33 = (_rightPadding_23 + "R0, R1, R0");
                        this.addCommand(_plus_33);
                        String _rightPadding_24 = this.rightPadding("BGTZ");
                        String _plus_34 = (_rightPadding_24 + "R0 ");
                        String _plus_35 = (_plus_34 + Integer.valueOf((MyGoGenerator.PC + 16)));
                        this.addCommand(_plus_35);
                        String _rightPadding_25 = this.rightPadding("LD");
                        String _plus_36 = (_rightPadding_25 + "R3, #1");
                        this.addCommand(_plus_36);
                        int _SP_4 = MyGoGenerator.SP;
                        MyGoGenerator.SP = (_SP_4 + MyGoGenerator.ALLOC);
                        String _rightPadding_26 = this.rightPadding("ST");
                        String _sPValue_6 = this.getSPValue(MyGoGenerator.SP);
                        String _plus_37 = (_rightPadding_26 + _sPValue_6);
                        String _plus_38 = (_plus_37 + ", R3");
                        this.addCommand(_plus_38);
                        return MyGoGenerator.SP;
                      } else {
                        boolean _equals_10 = Objects.equal(op, "!=");
                        if (_equals_10) {
                          String _rightPadding_27 = this.rightPadding("LD");
                          String _plus_39 = (_rightPadding_27 + "R3, #1");
                          this.addCommand(_plus_39);
                          String _rightPadding_28 = this.rightPadding("XOR");
                          String _plus_40 = (_rightPadding_28 + "R0, R1, R0");
                          this.addCommand(_plus_40);
                          String _rightPadding_29 = this.rightPadding("BGTZ");
                          String _plus_41 = (_rightPadding_29 + "R0 ");
                          String _plus_42 = (_plus_41 + Integer.valueOf((MyGoGenerator.PC + 16)));
                          this.addCommand(_plus_42);
                          String _rightPadding_30 = this.rightPadding("LD");
                          String _plus_43 = (_rightPadding_30 + "R3, #0");
                          this.addCommand(_plus_43);
                          int _SP_5 = MyGoGenerator.SP;
                          MyGoGenerator.SP = (_SP_5 + MyGoGenerator.ALLOC);
                          String _rightPadding_31 = this.rightPadding("ST");
                          String _sPValue_7 = this.getSPValue(MyGoGenerator.SP);
                          String _plus_44 = (_rightPadding_31 + _sPValue_7);
                          String _plus_45 = (_plus_44 + ", R3");
                          this.addCommand(_plus_45);
                          return MyGoGenerator.SP;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    return (-1);
  }
  
  public int binaryOperationCommand(final String operationCommand) {
    String _rightPadding = this.rightPadding(operationCommand);
    String _plus = (_rightPadding + "R0, R0, R1");
    this.addCommand(_plus);
    return this.push();
  }
  
  public String rightPadding(final String s) {
    StringBuilder sb = new StringBuilder();
    sb.append(s);
    while ((sb.length() < MyGoGenerator.PAD)) {
      sb.append(" ");
    }
    return sb.toString();
  }
  
  public String getSPValue(final int p) {
    return (("*" + Integer.valueOf(p)) + "(SP)");
  }
  
  public int push(final String constant) {
    int _SP = MyGoGenerator.SP;
    MyGoGenerator.SP = (_SP + MyGoGenerator.ALLOC);
    String _rightPadding = this.rightPadding("ST");
    String _sPValue = this.getSPValue(MyGoGenerator.SP);
    String _plus = (_rightPadding + _sPValue);
    String _plus_1 = (_plus + ", #");
    String _plus_2 = (_plus_1 + constant);
    this.addCommand(_plus_2);
    return MyGoGenerator.SP;
  }
  
  public int push() {
    int _SP = MyGoGenerator.SP;
    MyGoGenerator.SP = (_SP + MyGoGenerator.ALLOC);
    String _rightPadding = this.rightPadding("ST");
    String _sPValue = this.getSPValue(MyGoGenerator.SP);
    String _plus = (_rightPadding + _sPValue);
    String _plus_1 = (_plus + ", R0");
    this.addCommand(_plus_1);
    return MyGoGenerator.SP;
  }
  
  public int addCommand(final String s) {
    int _xblockexpression = (int) 0;
    {
      String s2 = Integer.toString(MyGoGenerator.PC);
      while ((s2.length() < 4)) {
        s2 = ("0" + s2);
      }
      String _out = this.out;
      this.out = (_out + (((s2 + "  ") + s) + "\n"));
      int _PC = MyGoGenerator.PC;
      _xblockexpression = MyGoGenerator.PC = (_PC + 8);
    }
    return _xblockexpression;
  }
}
