/*
 * generated by Xtext 2.14.0
 */
package org.xtext.compiler.go.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyGoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPackagePackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportsParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cDeclarationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclarationsDeclarationsParserRuleCall_2_0 = (RuleCall)cDeclarationsAssignment_2.eContents().get(0);
		
		//// https://tour.golang.org/basics/13
		//Model:
		//	package+=Package
		//	imports+=Imports
		//	declarations+=Declarations*;
		@Override public ParserRule getRule() { return rule; }
		
		//package+=Package imports+=Imports declarations+=Declarations*
		public Group getGroup() { return cGroup; }
		
		//package+=Package
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }
		
		//Package
		public RuleCall getPackagePackageParserRuleCall_0_0() { return cPackagePackageParserRuleCall_0_0; }
		
		//imports+=Imports
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Imports
		public RuleCall getImportsImportsParserRuleCall_1_0() { return cImportsImportsParserRuleCall_1_0; }
		
		//declarations+=Declarations*
		public Assignment getDeclarationsAssignment_2() { return cDeclarationsAssignment_2; }
		
		//Declarations
		public RuleCall getDeclarationsDeclarationsParserRuleCall_2_0() { return cDeclarationsDeclarationsParserRuleCall_2_0; }
	}
	public class DeclarationsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Declarations");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclarationFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cFunctionDeclarationAssignment_0.eContents().get(0);
		private final Assignment cTypeDeclarationAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cTypeDeclarationTypeDeclarationParserRuleCall_1_0 = (RuleCall)cTypeDeclarationAssignment_1.eContents().get(0);
		
		//Declarations:
		//	functionDeclaration=FunctionDeclaration | typeDeclaration=TypeDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//functionDeclaration=FunctionDeclaration | typeDeclaration=TypeDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//functionDeclaration=FunctionDeclaration
		public Assignment getFunctionDeclarationAssignment_0() { return cFunctionDeclarationAssignment_0; }
		
		//FunctionDeclaration
		public RuleCall getFunctionDeclarationFunctionDeclarationParserRuleCall_0_0() { return cFunctionDeclarationFunctionDeclarationParserRuleCall_0_0; }
		
		//typeDeclaration=TypeDeclaration
		public Assignment getTypeDeclarationAssignment_1() { return cTypeDeclarationAssignment_1; }
		
		//TypeDeclaration
		public RuleCall getTypeDeclarationTypeDeclarationParserRuleCall_1_0() { return cTypeDeclarationTypeDeclarationParserRuleCall_1_0; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package:
		//	'package' ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'package' ID
		public Group getGroup() { return cGroup; }
		
		//'package'
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ImportsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Imports");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Imports:
		//	('import' STRING)*;
		@Override public ParserRule getRule() { return rule; }
		
		//('import' STRING)*
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReceiverAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReceiverReceiverParserRuleCall_1_0 = (RuleCall)cReceiverAssignment_1.eContents().get(0);
		private final Assignment cIdAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdIDTerminalRuleCall_2_0 = (RuleCall)cIdAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParametersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cParametersParametersDeclarationParserRuleCall_4_0 = (RuleCall)cParametersAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyBodyParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FunctionDeclaration:
		//	'func' receiver=Receiver? id=ID '(' parameters=ParametersDeclaration? ')' type=Type? '{' body=Body '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'func' receiver=Receiver? id=ID '(' parameters=ParametersDeclaration? ')' type=Type? '{' body=Body '}'
		public Group getGroup() { return cGroup; }
		
		//'func'
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//receiver=Receiver?
		public Assignment getReceiverAssignment_1() { return cReceiverAssignment_1; }
		
		//Receiver
		public RuleCall getReceiverReceiverParserRuleCall_1_0() { return cReceiverReceiverParserRuleCall_1_0; }
		
		//id=ID
		public Assignment getIdAssignment_2() { return cIdAssignment_2; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_2_0() { return cIdIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//parameters=ParametersDeclaration?
		public Assignment getParametersAssignment_4() { return cParametersAssignment_4; }
		
		//ParametersDeclaration
		public RuleCall getParametersParametersDeclarationParserRuleCall_4_0() { return cParametersParametersDeclarationParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//type=Type?
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_6_0() { return cTypeTypeParserRuleCall_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }
		
		//body=Body
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_8_0() { return cBodyBodyParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Receiver");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdNameIDTerminalRuleCall_1_0 = (RuleCall)cIdNameAssignment_1.eContents().get(0);
		private final Assignment cIdTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdTypeIDTerminalRuleCall_2_0 = (RuleCall)cIdTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Receiver:
		//	'(' idName=ID idType=ID ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' idName=ID idType=ID ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//idName=ID
		public Assignment getIdNameAssignment_1() { return cIdNameAssignment_1; }
		
		//ID
		public RuleCall getIdNameIDTerminalRuleCall_1_0() { return cIdNameIDTerminalRuleCall_1_0; }
		
		//idType=ID
		public Assignment getIdTypeAssignment_2() { return cIdTypeAssignment_2; }
		
		//ID
		public RuleCall getIdTypeIDTerminalRuleCall_2_0() { return cIdTypeIDTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLineCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLineCommandLineCommandParserRuleCall_1_0 = (RuleCall)cLineCommandAssignment_1.eContents().get(0);
		
		//Body:
		//	{Body} lineCommand+=LineCommand*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Body} lineCommand+=LineCommand*
		public Group getGroup() { return cGroup; }
		
		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }
		
		//lineCommand+=LineCommand*
		public Assignment getLineCommandAssignment_1() { return cLineCommandAssignment_1; }
		
		//LineCommand
		public RuleCall getLineCommandLineCommandParserRuleCall_1_0() { return cLineCommandLineCommandParserRuleCall_1_0; }
	}
	public class LineCommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.LineCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFuncCallParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cReturnStatementParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cForRangeParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final RuleCall cAssignmentParserRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//LineCommand:
		//	FuncCall ";"? | VariableDeclaration ";"? | ReturnStatement ";"? | ForRange ";"? | Assignment ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//FuncCall ";"? | VariableDeclaration ";"? | ReturnStatement ";"? | ForRange ";"? | Assignment ";"?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//FuncCall ";"?
		public Group getGroup_0() { return cGroup_0; }
		
		//FuncCall
		public RuleCall getFuncCallParserRuleCall_0_0() { return cFuncCallParserRuleCall_0_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }
		
		//VariableDeclaration ";"?
		public Group getGroup_1() { return cGroup_1; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_1_0() { return cVariableDeclarationParserRuleCall_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//ReturnStatement ";"?
		public Group getGroup_2() { return cGroup_2; }
		
		//ReturnStatement
		public RuleCall getReturnStatementParserRuleCall_2_0() { return cReturnStatementParserRuleCall_2_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//ForRange ";"?
		public Group getGroup_3() { return cGroup_3; }
		
		//ForRange
		public RuleCall getForRangeParserRuleCall_3_0() { return cForRangeParserRuleCall_3_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//Assignment ";"?
		public Group getGroup_4() { return cGroup_4; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_4_0() { return cAssignmentParserRuleCall_4_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//Assignment:
		//	id=ID '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID '=' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
	}
	public class ForRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.ForRange");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cForKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cId1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cId1IDTerminalRuleCall_0_1_0 = (RuleCall)cId1Assignment_0_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cRangeKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_0_4_0 = (RuleCall)cExpressionAssignment_0_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cLineCommandAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cLineCommandLineCommandParserRuleCall_0_6_0 = (RuleCall)cLineCommandAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cForKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cId1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cId1IDTerminalRuleCall_1_1_0 = (RuleCall)cId1Assignment_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cId2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cId2IDTerminalRuleCall_1_3_0 = (RuleCall)cId2Assignment_1_3.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cRangeKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cExpressionAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_1_6_0 = (RuleCall)cExpressionAssignment_1_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Assignment cLineCommandAssignment_1_8 = (Assignment)cGroup_1.eContents().get(8);
		private final RuleCall cLineCommandLineCommandParserRuleCall_1_8_0 = (RuleCall)cLineCommandAssignment_1_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		
		//ForRange:
		//	'for' id1=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}' |
		//	'for' id1=ID ',' id2=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' id1=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}' | 'for' id1=ID ',' id2=ID ':=' 'range'
		//expression=Expression '{' lineCommand+=LineCommand* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'for' id1=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//'for'
		public Keyword getForKeyword_0_0() { return cForKeyword_0_0; }
		
		//id1=ID
		public Assignment getId1Assignment_0_1() { return cId1Assignment_0_1; }
		
		//ID
		public RuleCall getId1IDTerminalRuleCall_0_1_0() { return cId1IDTerminalRuleCall_0_1_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_0_2() { return cColonEqualsSignKeyword_0_2; }
		
		//'range'
		public Keyword getRangeKeyword_0_3() { return cRangeKeyword_0_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_4() { return cExpressionAssignment_0_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_4_0() { return cExpressionExpressionParserRuleCall_0_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }
		
		//lineCommand+=LineCommand*
		public Assignment getLineCommandAssignment_0_6() { return cLineCommandAssignment_0_6; }
		
		//LineCommand
		public RuleCall getLineCommandLineCommandParserRuleCall_0_6_0() { return cLineCommandLineCommandParserRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//'for' id1=ID ',' id2=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'for'
		public Keyword getForKeyword_1_0() { return cForKeyword_1_0; }
		
		//id1=ID
		public Assignment getId1Assignment_1_1() { return cId1Assignment_1_1; }
		
		//ID
		public RuleCall getId1IDTerminalRuleCall_1_1_0() { return cId1IDTerminalRuleCall_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_1_2() { return cCommaKeyword_1_2; }
		
		//id2=ID
		public Assignment getId2Assignment_1_3() { return cId2Assignment_1_3; }
		
		//ID
		public RuleCall getId2IDTerminalRuleCall_1_3_0() { return cId2IDTerminalRuleCall_1_3_0; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_1_4() { return cColonEqualsSignKeyword_1_4; }
		
		//'range'
		public Keyword getRangeKeyword_1_5() { return cRangeKeyword_1_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_6() { return cExpressionAssignment_1_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_6_0() { return cExpressionExpressionParserRuleCall_1_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_7() { return cLeftCurlyBracketKeyword_1_7; }
		
		//lineCommand+=LineCommand*
		public Assignment getLineCommandAssignment_1_8() { return cLineCommandAssignment_1_8; }
		
		//LineCommand
		public RuleCall getLineCommandLineCommandParserRuleCall_1_8_0() { return cLineCommandLineCommandParserRuleCall_1_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_9() { return cRightCurlyBracketKeyword_1_9; }
	}
	public class ParametersDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.ParametersDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdTypeIdTypeParserRuleCall_0_0 = (RuleCall)cIdTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdTypeIdTypeParserRuleCall_1_1_0 = (RuleCall)cIdTypeAssignment_1_1.eContents().get(0);
		
		//ParametersDeclaration:
		//	idType+=IdType (',' idType+=IdType)*;
		@Override public ParserRule getRule() { return rule; }
		
		//idType+=IdType (',' idType+=IdType)*
		public Group getGroup() { return cGroup; }
		
		//idType+=IdType
		public Assignment getIdTypeAssignment_0() { return cIdTypeAssignment_0; }
		
		//IdType
		public RuleCall getIdTypeIdTypeParserRuleCall_0_0() { return cIdTypeIdTypeParserRuleCall_0_0; }
		
		//(',' idType+=IdType)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//idType+=IdType
		public Assignment getIdTypeAssignment_1_1() { return cIdTypeAssignment_1_1; }
		
		//IdType
		public RuleCall getIdTypeIdTypeParserRuleCall_1_1_0() { return cIdTypeIdTypeParserRuleCall_1_1_0; }
	}
	public class ParametersValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.ParametersValues");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParametersValuesAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0_0 = (RuleCall)cExpressionAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1.eContents().get(0);
		
		//ParametersValues:
		//	{ParametersValues} (expression+=Expression (',' expression+=Expression)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParametersValues} (expression+=Expression (',' expression+=Expression)*)?
		public Group getGroup() { return cGroup; }
		
		//{ParametersValues}
		public Action getParametersValuesAction_0() { return cParametersValuesAction_0; }
		
		//(expression+=Expression (',' expression+=Expression)*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1_0() { return cExpressionAssignment_1_0; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0_0() { return cExpressionExpressionParserRuleCall_1_0_0; }
		
		//(',' expression+=Expression)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//','
		public Keyword getCommaKeyword_1_1_0() { return cCommaKeyword_1_1_0; }
		
		//expression+=Expression
		public Assignment getExpressionAssignment_1_1_1() { return cExpressionAssignment_1_1_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_1_1_0() { return cExpressionExpressionParserRuleCall_1_1_1_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFloat64Keyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final RuleCall cIDTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Type:
		//	'int' | 'float64' | 'bool' | 'string' | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'float64' | 'bool' | 'string' | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'float64'
		public Keyword getFloat64Keyword_1() { return cFloat64Keyword_1; }
		
		//'bool'
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
		
		//'string'
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4() { return cIDTerminalRuleCall_4; }
	}
	public class TypeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.TypeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//TypeDeclaration:
		//	'type' id=ID type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//'type' id=ID type=Type
		public Group getGroup() { return cGroup; }
		
		//'type'
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIntValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIntValueIntValueParserRuleCall_0_0 = (RuleCall)cIntValueAssignment_0.eContents().get(0);
		private final Assignment cFloatValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFloatValueFloatValueParserRuleCall_1_0 = (RuleCall)cFloatValueAssignment_1.eContents().get(0);
		private final Assignment cStringValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStringValueStringValueParserRuleCall_2_0 = (RuleCall)cStringValueAssignment_2.eContents().get(0);
		private final Assignment cBoolValueAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBoolValueBoolValueParserRuleCall_3_0 = (RuleCall)cBoolValueAssignment_3.eContents().get(0);
		
		//Value:
		//	intValue=IntValue | floatValue=FloatValue | stringValue=StringValue | boolValue=BoolValue;
		@Override public ParserRule getRule() { return rule; }
		
		//intValue=IntValue | floatValue=FloatValue | stringValue=StringValue | boolValue=BoolValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intValue=IntValue
		public Assignment getIntValueAssignment_0() { return cIntValueAssignment_0; }
		
		//IntValue
		public RuleCall getIntValueIntValueParserRuleCall_0_0() { return cIntValueIntValueParserRuleCall_0_0; }
		
		//floatValue=FloatValue
		public Assignment getFloatValueAssignment_1() { return cFloatValueAssignment_1; }
		
		//FloatValue
		public RuleCall getFloatValueFloatValueParserRuleCall_1_0() { return cFloatValueFloatValueParserRuleCall_1_0; }
		
		//stringValue=StringValue
		public Assignment getStringValueAssignment_2() { return cStringValueAssignment_2; }
		
		//StringValue
		public RuleCall getStringValueStringValueParserRuleCall_2_0() { return cStringValueStringValueParserRuleCall_2_0; }
		
		//boolValue=BoolValue
		public Assignment getBoolValueAssignment_3() { return cBoolValueAssignment_3; }
		
		//BoolValue
		public RuleCall getBoolValueBoolValueParserRuleCall_3_0() { return cBoolValueBoolValueParserRuleCall_3_0; }
	}
	public class IntValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.IntValue");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntValue:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class FloatValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.FloatValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FloatValue:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.StringValue");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//StringValue:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class BoolValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.BoolValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BoolValue:
		//	'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class IdTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.IdType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		
		//IdType:
		//	id=ID type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID type=Type
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }
	}
	public class FuncCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.FuncCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReceiverInstanceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReceiverInstanceReceiverInstanceParserRuleCall_0_0 = (RuleCall)cReceiverInstanceAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cParametersValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cParametersValuesParametersValuesParserRuleCall_3_0 = (RuleCall)cParametersValuesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//FuncCall:
		//	receiverInstance=ReceiverInstance? id=ID '(' parametersValues=ParametersValues ')';
		@Override public ParserRule getRule() { return rule; }
		
		//receiverInstance=ReceiverInstance? id=ID '(' parametersValues=ParametersValues ')'
		public Group getGroup() { return cGroup; }
		
		//receiverInstance=ReceiverInstance?
		public Assignment getReceiverInstanceAssignment_0() { return cReceiverInstanceAssignment_0; }
		
		//ReceiverInstance
		public RuleCall getReceiverInstanceReceiverInstanceParserRuleCall_0_0() { return cReceiverInstanceReceiverInstanceParserRuleCall_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//parametersValues=ParametersValues
		public Assignment getParametersValuesAssignment_3() { return cParametersValuesAssignment_3; }
		
		//ParametersValues
		public RuleCall getParametersValuesParametersValuesParserRuleCall_3_0() { return cParametersValuesParametersValuesParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ReceiverInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.ReceiverInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ReceiverInstance:
		//	id=ID '.';
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID '.'
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression2ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpPrecedence1ParserRuleCall_1_1_0 = (RuleCall)cBinaryOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression2ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//	Expression2 ({Expression.left=current} binaryOp=BinaryOpPrecedence1 right=Expression2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression2 ({Expression.left=current} binaryOp=BinaryOpPrecedence1 right=Expression2)*
		public Group getGroup() { return cGroup; }
		
		//Expression2
		public RuleCall getExpression2ParserRuleCall_0() { return cExpression2ParserRuleCall_0; }
		
		//({Expression.left=current} binaryOp=BinaryOpPrecedence1 right=Expression2)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression.left=current}
		public Action getExpressionLeftAction_1_0() { return cExpressionLeftAction_1_0; }
		
		//binaryOp=BinaryOpPrecedence1
		public Assignment getBinaryOpAssignment_1_1() { return cBinaryOpAssignment_1_1; }
		
		//BinaryOpPrecedence1
		public RuleCall getBinaryOpBinaryOpPrecedence1ParserRuleCall_1_1_0() { return cBinaryOpBinaryOpPrecedence1ParserRuleCall_1_1_0; }
		
		//right=Expression2
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression2
		public RuleCall getRightExpression2ParserRuleCall_1_2_0() { return cRightExpression2ParserRuleCall_1_2_0; }
	}
	public class Expression2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Expression2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression3ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpression2LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpPrecedence2ParserRuleCall_1_1_0 = (RuleCall)cBinaryOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression3ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression2 Expression:
		//	Expression3 ({Expression2.left=current} binaryOp=BinaryOpPrecedence2 right=Expression3)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression3 ({Expression2.left=current} binaryOp=BinaryOpPrecedence2 right=Expression3)*
		public Group getGroup() { return cGroup; }
		
		//Expression3
		public RuleCall getExpression3ParserRuleCall_0() { return cExpression3ParserRuleCall_0; }
		
		//({Expression2.left=current} binaryOp=BinaryOpPrecedence2 right=Expression3)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression2.left=current}
		public Action getExpression2LeftAction_1_0() { return cExpression2LeftAction_1_0; }
		
		//binaryOp=BinaryOpPrecedence2
		public Assignment getBinaryOpAssignment_1_1() { return cBinaryOpAssignment_1_1; }
		
		//BinaryOpPrecedence2
		public RuleCall getBinaryOpBinaryOpPrecedence2ParserRuleCall_1_1_0() { return cBinaryOpBinaryOpPrecedence2ParserRuleCall_1_1_0; }
		
		//right=Expression3
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression3
		public RuleCall getRightExpression3ParserRuleCall_1_2_0() { return cRightExpression3ParserRuleCall_1_2_0; }
	}
	public class Expression3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Expression3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression4ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpression3LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpPrecedence3ParserRuleCall_1_1_0 = (RuleCall)cBinaryOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression4ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression3 Expression:
		//	Expression4 ({Expression3.left=current} binaryOp=BinaryOpPrecedence3 right=Expression4)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression4 ({Expression3.left=current} binaryOp=BinaryOpPrecedence3 right=Expression4)*
		public Group getGroup() { return cGroup; }
		
		//Expression4
		public RuleCall getExpression4ParserRuleCall_0() { return cExpression4ParserRuleCall_0; }
		
		//({Expression3.left=current} binaryOp=BinaryOpPrecedence3 right=Expression4)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression3.left=current}
		public Action getExpression3LeftAction_1_0() { return cExpression3LeftAction_1_0; }
		
		//binaryOp=BinaryOpPrecedence3
		public Assignment getBinaryOpAssignment_1_1() { return cBinaryOpAssignment_1_1; }
		
		//BinaryOpPrecedence3
		public RuleCall getBinaryOpBinaryOpPrecedence3ParserRuleCall_1_1_0() { return cBinaryOpBinaryOpPrecedence3ParserRuleCall_1_1_0; }
		
		//right=Expression4
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression4
		public RuleCall getRightExpression4ParserRuleCall_1_2_0() { return cRightExpression4ParserRuleCall_1_2_0; }
	}
	public class Expression4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Expression4");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpression5ParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpression4LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpPrecedence4ParserRuleCall_1_1_0 = (RuleCall)cBinaryOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightExpression5ParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression4 Expression:
		//	Expression5 ({Expression4.left=current} binaryOp=BinaryOpPrecedence4 right=Expression5)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expression5 ({Expression4.left=current} binaryOp=BinaryOpPrecedence4 right=Expression5)*
		public Group getGroup() { return cGroup; }
		
		//Expression5
		public RuleCall getExpression5ParserRuleCall_0() { return cExpression5ParserRuleCall_0; }
		
		//({Expression4.left=current} binaryOp=BinaryOpPrecedence4 right=Expression5)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression4.left=current}
		public Action getExpression4LeftAction_1_0() { return cExpression4LeftAction_1_0; }
		
		//binaryOp=BinaryOpPrecedence4
		public Assignment getBinaryOpAssignment_1_1() { return cBinaryOpAssignment_1_1; }
		
		//BinaryOpPrecedence4
		public RuleCall getBinaryOpBinaryOpPrecedence4ParserRuleCall_1_1_0() { return cBinaryOpBinaryOpPrecedence4ParserRuleCall_1_1_0; }
		
		//right=Expression5
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Expression5
		public RuleCall getRightExpression5ParserRuleCall_1_2_0() { return cRightExpression5ParserRuleCall_1_2_0; }
	}
	public class Expression5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Expression5");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cUnaryExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cExpression5LeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cBinaryOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBinaryOpBinaryOpPrecedence5ParserRuleCall_1_1_0 = (RuleCall)cBinaryOpAssignment_1_1.eContents().get(0);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightUnaryExprParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression5 Expression:
		//	UnaryExpr ({Expression5.left=current} binaryOp=BinaryOpPrecedence5 right=UnaryExpr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//UnaryExpr ({Expression5.left=current} binaryOp=BinaryOpPrecedence5 right=UnaryExpr)*
		public Group getGroup() { return cGroup; }
		
		//UnaryExpr
		public RuleCall getUnaryExprParserRuleCall_0() { return cUnaryExprParserRuleCall_0; }
		
		//({Expression5.left=current} binaryOp=BinaryOpPrecedence5 right=UnaryExpr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Expression5.left=current}
		public Action getExpression5LeftAction_1_0() { return cExpression5LeftAction_1_0; }
		
		//binaryOp=BinaryOpPrecedence5
		public Assignment getBinaryOpAssignment_1_1() { return cBinaryOpAssignment_1_1; }
		
		//BinaryOpPrecedence5
		public RuleCall getBinaryOpBinaryOpPrecedence5ParserRuleCall_1_1_0() { return cBinaryOpBinaryOpPrecedence5ParserRuleCall_1_1_0; }
		
		//right=UnaryExpr
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//UnaryExpr
		public RuleCall getRightUnaryExprParserRuleCall_1_2_0() { return cRightUnaryExprParserRuleCall_1_2_0; }
	}
	public class UnaryExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.UnaryExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//UnaryExpr Expression:
		//	Value | Variable | FuncCall |
		//	'(' Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//Value | Variable | FuncCall | '(' Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Value
		public RuleCall getValueParserRuleCall_0() { return cValueParserRuleCall_0; }
		
		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
		
		//FuncCall
		public RuleCall getFuncCallParserRuleCall_2() { return cFuncCallParserRuleCall_2; }
		
		//'(' Expression ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_3_1() { return cExpressionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class ExplicitCastElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.ExplicitCast");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeTypeParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ExplicitCast:
		//	type=Type '(' expression=Expression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//type=Type '(' expression=Expression ')'
		public Group getGroup() { return cGroup; }
		
		//type=Type
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_0_0() { return cTypeTypeParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_0() { return cExpressionExpressionParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.Variable");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Variable:
		//	id=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID
		public Assignment getIdAssignment() { return cIdAssignment; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0() { return cIdIDTerminalRuleCall_0; }
	}
	public class BinaryOpPrecedence1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.BinaryOpPrecedence1");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//BinaryOpPrecedence1:
		//	'||';
		@Override public ParserRule getRule() { return rule; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}
	public class BinaryOpPrecedence2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.BinaryOpPrecedence2");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//BinaryOpPrecedence2:
		//	'&&';
		@Override public ParserRule getRule() { return rule; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}
	public class BinaryOpPrecedence3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.BinaryOpPrecedence3");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//BinaryOpPrecedence3:
		//	'==' | '!=' | '<' | '<=' | '>' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'==' | '!=' | '<' | '<=' | '>' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'=='
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}
	public class BinaryOpPrecedence4Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.BinaryOpPrecedence4");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cVerticalLineKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cCircumflexAccentKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//BinaryOpPrecedence4:
		//	'+' | '-' | '|' | '^';
		@Override public ParserRule getRule() { return rule; }
		
		//'+' | '-' | '|' | '^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'+'
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2() { return cVerticalLineKeyword_2; }
		
		//'^'
		public Keyword getCircumflexAccentKeyword_3() { return cCircumflexAccentKeyword_3; }
	}
	public class BinaryOpPrecedence5Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.BinaryOpPrecedence5");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignLessThanSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cAmpersandCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//BinaryOpPrecedence5:
		//	'*' | '/' | '%' | '<<' | '>>' | '&' | '&^';
		@Override public ParserRule getRule() { return rule; }
		
		//'*' | '/' | '%' | '<<' | '>>' | '&' | '&^'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'*'
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//'<<'
		public Keyword getLessThanSignLessThanSignKeyword_3() { return cLessThanSignLessThanSignKeyword_3; }
		
		//'>>'
		public Keyword getGreaterThanSignGreaterThanSignKeyword_4() { return cGreaterThanSignGreaterThanSignKeyword_4; }
		
		//'&'
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }
		
		//'&^'
		public Keyword getAmpersandCircumflexAccentKeyword_6() { return cAmpersandCircumflexAccentKeyword_6; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.VariableDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cVarKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cIdsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_0_1_0 = (RuleCall)cIdsAssignment_0_1.eContents().get(0);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cIdsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_0_2_1_0 = (RuleCall)cIdsAssignment_0_2_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cExpressionAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_0_4_0 = (RuleCall)cExpressionAssignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVarKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_1_1_0 = (RuleCall)cIdsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cIdsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_1_2_1_0 = (RuleCall)cIdsAssignment_1_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cVarKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_2_1_0 = (RuleCall)cIdsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cIdsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cIdsIDTerminalRuleCall_2_2_1_0 = (RuleCall)cIdsAssignment_2_2_1.eContents().get(0);
		private final Assignment cTypeAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_2_3_0 = (RuleCall)cTypeAssignment_2_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Assignment cExpressionAssignment_2_5 = (Assignment)cGroup_2.eContents().get(5);
		private final RuleCall cExpressionExpressionParserRuleCall_2_5_0 = (RuleCall)cExpressionAssignment_2_5.eContents().get(0);
		
		//VariableDeclaration:
		//	'var' ids+=ID (',' ids+=ID)* '=' expression=Expression |
		//	'var' ids+=ID (',' ids+=ID)* type=Type |
		//	'var' ids+=ID (',' ids+=ID)* type=Type '=' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'var' ids+=ID (',' ids+=ID)* '=' expression=Expression | 'var' ids+=ID (',' ids+=ID)* type=Type | 'var' ids+=ID (','
		//ids+=ID)* type=Type '=' expression=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'var' ids+=ID (',' ids+=ID)* '=' expression=Expression
		public Group getGroup_0() { return cGroup_0; }
		
		//'var'
		public Keyword getVarKeyword_0_0() { return cVarKeyword_0_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_0_1() { return cIdsAssignment_0_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_0_1_0() { return cIdsIDTerminalRuleCall_0_1_0; }
		
		//(',' ids+=ID)*
		public Group getGroup_0_2() { return cGroup_0_2; }
		
		//','
		public Keyword getCommaKeyword_0_2_0() { return cCommaKeyword_0_2_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_0_2_1() { return cIdsAssignment_0_2_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_0_2_1_0() { return cIdsIDTerminalRuleCall_0_2_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_3() { return cEqualsSignKeyword_0_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_4() { return cExpressionAssignment_0_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_4_0() { return cExpressionExpressionParserRuleCall_0_4_0; }
		
		//'var' ids+=ID (',' ids+=ID)* type=Type
		public Group getGroup_1() { return cGroup_1; }
		
		//'var'
		public Keyword getVarKeyword_1_0() { return cVarKeyword_1_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_1_1_0() { return cIdsIDTerminalRuleCall_1_1_0; }
		
		//(',' ids+=ID)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//','
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_1_2_1() { return cIdsAssignment_1_2_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_1_2_1_0() { return cIdsIDTerminalRuleCall_1_2_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_1_3_0() { return cTypeTypeParserRuleCall_1_3_0; }
		
		//'var' ids+=ID (',' ids+=ID)* type=Type '=' expression=Expression
		public Group getGroup_2() { return cGroup_2; }
		
		//'var'
		public Keyword getVarKeyword_2_0() { return cVarKeyword_2_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_2_1() { return cIdsAssignment_2_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_2_1_0() { return cIdsIDTerminalRuleCall_2_1_0; }
		
		//(',' ids+=ID)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//','
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }
		
		//ids+=ID
		public Assignment getIdsAssignment_2_2_1() { return cIdsAssignment_2_2_1; }
		
		//ID
		public RuleCall getIdsIDTerminalRuleCall_2_2_1_0() { return cIdsIDTerminalRuleCall_2_2_1_0; }
		
		//type=Type
		public Assignment getTypeAssignment_2_3() { return cTypeAssignment_2_3; }
		
		//Type
		public RuleCall getTypeTypeParserRuleCall_2_3_0() { return cTypeTypeParserRuleCall_2_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_4() { return cEqualsSignKeyword_2_4; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_2_5() { return cExpressionAssignment_2_5; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_2_5_0() { return cExpressionExpressionParserRuleCall_2_5_0; }
	}
	public class ReturnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.compiler.go.MyGo.ReturnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//ReturnStatement:
		//	'return' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'return' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'return'
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	
	
	private final ModelElements pModel;
	private final DeclarationsElements pDeclarations;
	private final PackageElements pPackage;
	private final ImportsElements pImports;
	private final FunctionDeclarationElements pFunctionDeclaration;
	private final ReceiverElements pReceiver;
	private final BodyElements pBody;
	private final LineCommandElements pLineCommand;
	private final AssignmentElements pAssignment;
	private final ForRangeElements pForRange;
	private final ParametersDeclarationElements pParametersDeclaration;
	private final ParametersValuesElements pParametersValues;
	private final TypeElements pType;
	private final TypeDeclarationElements pTypeDeclaration;
	private final ValueElements pValue;
	private final IntValueElements pIntValue;
	private final FloatValueElements pFloatValue;
	private final StringValueElements pStringValue;
	private final BoolValueElements pBoolValue;
	private final IdTypeElements pIdType;
	private final FuncCallElements pFuncCall;
	private final ReceiverInstanceElements pReceiverInstance;
	private final ExpressionElements pExpression;
	private final Expression2Elements pExpression2;
	private final Expression3Elements pExpression3;
	private final Expression4Elements pExpression4;
	private final Expression5Elements pExpression5;
	private final UnaryExprElements pUnaryExpr;
	private final ExplicitCastElements pExplicitCast;
	private final VariableElements pVariable;
	private final BinaryOpPrecedence1Elements pBinaryOpPrecedence1;
	private final BinaryOpPrecedence2Elements pBinaryOpPrecedence2;
	private final BinaryOpPrecedence3Elements pBinaryOpPrecedence3;
	private final BinaryOpPrecedence4Elements pBinaryOpPrecedence4;
	private final BinaryOpPrecedence5Elements pBinaryOpPrecedence5;
	private final VariableDeclarationElements pVariableDeclaration;
	private final ReturnStatementElements pReturnStatement;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyGoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pDeclarations = new DeclarationsElements();
		this.pPackage = new PackageElements();
		this.pImports = new ImportsElements();
		this.pFunctionDeclaration = new FunctionDeclarationElements();
		this.pReceiver = new ReceiverElements();
		this.pBody = new BodyElements();
		this.pLineCommand = new LineCommandElements();
		this.pAssignment = new AssignmentElements();
		this.pForRange = new ForRangeElements();
		this.pParametersDeclaration = new ParametersDeclarationElements();
		this.pParametersValues = new ParametersValuesElements();
		this.pType = new TypeElements();
		this.pTypeDeclaration = new TypeDeclarationElements();
		this.pValue = new ValueElements();
		this.pIntValue = new IntValueElements();
		this.pFloatValue = new FloatValueElements();
		this.pStringValue = new StringValueElements();
		this.pBoolValue = new BoolValueElements();
		this.pIdType = new IdTypeElements();
		this.pFuncCall = new FuncCallElements();
		this.pReceiverInstance = new ReceiverInstanceElements();
		this.pExpression = new ExpressionElements();
		this.pExpression2 = new Expression2Elements();
		this.pExpression3 = new Expression3Elements();
		this.pExpression4 = new Expression4Elements();
		this.pExpression5 = new Expression5Elements();
		this.pUnaryExpr = new UnaryExprElements();
		this.pExplicitCast = new ExplicitCastElements();
		this.pVariable = new VariableElements();
		this.pBinaryOpPrecedence1 = new BinaryOpPrecedence1Elements();
		this.pBinaryOpPrecedence2 = new BinaryOpPrecedence2Elements();
		this.pBinaryOpPrecedence3 = new BinaryOpPrecedence3Elements();
		this.pBinaryOpPrecedence4 = new BinaryOpPrecedence4Elements();
		this.pBinaryOpPrecedence5 = new BinaryOpPrecedence5Elements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pReturnStatement = new ReturnStatementElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.compiler.go.MyGo".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//// https://tour.golang.org/basics/13
	//Model:
	//	package+=Package
	//	imports+=Imports
	//	declarations+=Declarations*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Declarations:
	//	functionDeclaration=FunctionDeclaration | typeDeclaration=TypeDeclaration;
	public DeclarationsElements getDeclarationsAccess() {
		return pDeclarations;
	}
	
	public ParserRule getDeclarationsRule() {
		return getDeclarationsAccess().getRule();
	}
	
	//Package:
	//	'package' ID;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//Imports:
	//	('import' STRING)*;
	public ImportsElements getImportsAccess() {
		return pImports;
	}
	
	public ParserRule getImportsRule() {
		return getImportsAccess().getRule();
	}
	
	//FunctionDeclaration:
	//	'func' receiver=Receiver? id=ID '(' parameters=ParametersDeclaration? ')' type=Type? '{' body=Body '}';
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return pFunctionDeclaration;
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}
	
	//Receiver:
	//	'(' idName=ID idType=ID ')';
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Body:
	//	{Body} lineCommand+=LineCommand*;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//LineCommand:
	//	FuncCall ";"? | VariableDeclaration ";"? | ReturnStatement ";"? | ForRange ";"? | Assignment ";"?;
	public LineCommandElements getLineCommandAccess() {
		return pLineCommand;
	}
	
	public ParserRule getLineCommandRule() {
		return getLineCommandAccess().getRule();
	}
	
	//Assignment:
	//	id=ID '=' expression=Expression;
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//ForRange:
	//	'for' id1=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}' |
	//	'for' id1=ID ',' id2=ID ':=' 'range' expression=Expression '{' lineCommand+=LineCommand* '}';
	public ForRangeElements getForRangeAccess() {
		return pForRange;
	}
	
	public ParserRule getForRangeRule() {
		return getForRangeAccess().getRule();
	}
	
	//ParametersDeclaration:
	//	idType+=IdType (',' idType+=IdType)*;
	public ParametersDeclarationElements getParametersDeclarationAccess() {
		return pParametersDeclaration;
	}
	
	public ParserRule getParametersDeclarationRule() {
		return getParametersDeclarationAccess().getRule();
	}
	
	//ParametersValues:
	//	{ParametersValues} (expression+=Expression (',' expression+=Expression)*)?;
	public ParametersValuesElements getParametersValuesAccess() {
		return pParametersValues;
	}
	
	public ParserRule getParametersValuesRule() {
		return getParametersValuesAccess().getRule();
	}
	
	//Type:
	//	'int' | 'float64' | 'bool' | 'string' | ID;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//TypeDeclaration:
	//	'type' id=ID type=Type;
	public TypeDeclarationElements getTypeDeclarationAccess() {
		return pTypeDeclaration;
	}
	
	public ParserRule getTypeDeclarationRule() {
		return getTypeDeclarationAccess().getRule();
	}
	
	//Value:
	//	intValue=IntValue | floatValue=FloatValue | stringValue=StringValue | boolValue=BoolValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//IntValue:
	//	INT;
	public IntValueElements getIntValueAccess() {
		return pIntValue;
	}
	
	public ParserRule getIntValueRule() {
		return getIntValueAccess().getRule();
	}
	
	//FloatValue:
	//	INT '.' INT;
	public FloatValueElements getFloatValueAccess() {
		return pFloatValue;
	}
	
	public ParserRule getFloatValueRule() {
		return getFloatValueAccess().getRule();
	}
	
	//StringValue:
	//	STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//BoolValue:
	//	'true' | 'false';
	public BoolValueElements getBoolValueAccess() {
		return pBoolValue;
	}
	
	public ParserRule getBoolValueRule() {
		return getBoolValueAccess().getRule();
	}
	
	//IdType:
	//	id=ID type=Type;
	public IdTypeElements getIdTypeAccess() {
		return pIdType;
	}
	
	public ParserRule getIdTypeRule() {
		return getIdTypeAccess().getRule();
	}
	
	//FuncCall:
	//	receiverInstance=ReceiverInstance? id=ID '(' parametersValues=ParametersValues ')';
	public FuncCallElements getFuncCallAccess() {
		return pFuncCall;
	}
	
	public ParserRule getFuncCallRule() {
		return getFuncCallAccess().getRule();
	}
	
	//ReceiverInstance:
	//	id=ID '.';
	public ReceiverInstanceElements getReceiverInstanceAccess() {
		return pReceiverInstance;
	}
	
	public ParserRule getReceiverInstanceRule() {
		return getReceiverInstanceAccess().getRule();
	}
	
	//Expression:
	//	Expression2 ({Expression.left=current} binaryOp=BinaryOpPrecedence1 right=Expression2)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Expression2 Expression:
	//	Expression3 ({Expression2.left=current} binaryOp=BinaryOpPrecedence2 right=Expression3)*;
	public Expression2Elements getExpression2Access() {
		return pExpression2;
	}
	
	public ParserRule getExpression2Rule() {
		return getExpression2Access().getRule();
	}
	
	//Expression3 Expression:
	//	Expression4 ({Expression3.left=current} binaryOp=BinaryOpPrecedence3 right=Expression4)*;
	public Expression3Elements getExpression3Access() {
		return pExpression3;
	}
	
	public ParserRule getExpression3Rule() {
		return getExpression3Access().getRule();
	}
	
	//Expression4 Expression:
	//	Expression5 ({Expression4.left=current} binaryOp=BinaryOpPrecedence4 right=Expression5)*;
	public Expression4Elements getExpression4Access() {
		return pExpression4;
	}
	
	public ParserRule getExpression4Rule() {
		return getExpression4Access().getRule();
	}
	
	//Expression5 Expression:
	//	UnaryExpr ({Expression5.left=current} binaryOp=BinaryOpPrecedence5 right=UnaryExpr)*;
	public Expression5Elements getExpression5Access() {
		return pExpression5;
	}
	
	public ParserRule getExpression5Rule() {
		return getExpression5Access().getRule();
	}
	
	//UnaryExpr Expression:
	//	Value | Variable | FuncCall |
	//	'(' Expression ')';
	public UnaryExprElements getUnaryExprAccess() {
		return pUnaryExpr;
	}
	
	public ParserRule getUnaryExprRule() {
		return getUnaryExprAccess().getRule();
	}
	
	//ExplicitCast:
	//	type=Type '(' expression=Expression ')';
	public ExplicitCastElements getExplicitCastAccess() {
		return pExplicitCast;
	}
	
	public ParserRule getExplicitCastRule() {
		return getExplicitCastAccess().getRule();
	}
	
	//Variable:
	//	id=ID;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//BinaryOpPrecedence1:
	//	'||';
	public BinaryOpPrecedence1Elements getBinaryOpPrecedence1Access() {
		return pBinaryOpPrecedence1;
	}
	
	public ParserRule getBinaryOpPrecedence1Rule() {
		return getBinaryOpPrecedence1Access().getRule();
	}
	
	//BinaryOpPrecedence2:
	//	'&&';
	public BinaryOpPrecedence2Elements getBinaryOpPrecedence2Access() {
		return pBinaryOpPrecedence2;
	}
	
	public ParserRule getBinaryOpPrecedence2Rule() {
		return getBinaryOpPrecedence2Access().getRule();
	}
	
	//BinaryOpPrecedence3:
	//	'==' | '!=' | '<' | '<=' | '>' | '>=';
	public BinaryOpPrecedence3Elements getBinaryOpPrecedence3Access() {
		return pBinaryOpPrecedence3;
	}
	
	public ParserRule getBinaryOpPrecedence3Rule() {
		return getBinaryOpPrecedence3Access().getRule();
	}
	
	//BinaryOpPrecedence4:
	//	'+' | '-' | '|' | '^';
	public BinaryOpPrecedence4Elements getBinaryOpPrecedence4Access() {
		return pBinaryOpPrecedence4;
	}
	
	public ParserRule getBinaryOpPrecedence4Rule() {
		return getBinaryOpPrecedence4Access().getRule();
	}
	
	//BinaryOpPrecedence5:
	//	'*' | '/' | '%' | '<<' | '>>' | '&' | '&^';
	public BinaryOpPrecedence5Elements getBinaryOpPrecedence5Access() {
		return pBinaryOpPrecedence5;
	}
	
	public ParserRule getBinaryOpPrecedence5Rule() {
		return getBinaryOpPrecedence5Access().getRule();
	}
	
	//VariableDeclaration:
	//	'var' ids+=ID (',' ids+=ID)* '=' expression=Expression |
	//	'var' ids+=ID (',' ids+=ID)* type=Type |
	//	'var' ids+=ID (',' ids+=ID)* type=Type '=' expression=Expression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//ReturnStatement:
	//	'return' expression=Expression;
	public ReturnStatementElements getReturnStatementAccess() {
		return pReturnStatement;
	}
	
	public ParserRule getReturnStatementRule() {
		return getReturnStatementAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
