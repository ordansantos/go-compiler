/**
 * generated by Xtext 2.14.0
 */
package org.xtext.compiler.go.myGo.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.compiler.go.myGo.Declarations;
import org.xtext.compiler.go.myGo.FunctionDeclaration;
import org.xtext.compiler.go.myGo.MyGoPackage;
import org.xtext.compiler.go.myGo.TypeDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Declarations</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.compiler.go.myGo.impl.DeclarationsImpl#getFunctionDeclaration <em>Function Declaration</em>}</li>
 *   <li>{@link org.xtext.compiler.go.myGo.impl.DeclarationsImpl#getTypeDeclaration <em>Type Declaration</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class DeclarationsImpl extends MinimalEObjectImpl.Container implements Declarations
{
  /**
   * The cached value of the '{@link #getFunctionDeclaration() <em>Function Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFunctionDeclaration()
   * @generated
   * @ordered
   */
  protected FunctionDeclaration functionDeclaration;

  /**
   * The cached value of the '{@link #getTypeDeclaration() <em>Type Declaration</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTypeDeclaration()
   * @generated
   * @ordered
   */
  protected TypeDeclaration typeDeclaration;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DeclarationsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyGoPackage.Literals.DECLARATIONS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionDeclaration getFunctionDeclaration()
  {
    return functionDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetFunctionDeclaration(FunctionDeclaration newFunctionDeclaration, NotificationChain msgs)
  {
    FunctionDeclaration oldFunctionDeclaration = functionDeclaration;
    functionDeclaration = newFunctionDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION, oldFunctionDeclaration, newFunctionDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setFunctionDeclaration(FunctionDeclaration newFunctionDeclaration)
  {
    if (newFunctionDeclaration != functionDeclaration)
    {
      NotificationChain msgs = null;
      if (functionDeclaration != null)
        msgs = ((InternalEObject)functionDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION, null, msgs);
      if (newFunctionDeclaration != null)
        msgs = ((InternalEObject)newFunctionDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION, null, msgs);
      msgs = basicSetFunctionDeclaration(newFunctionDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION, newFunctionDeclaration, newFunctionDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TypeDeclaration getTypeDeclaration()
  {
    return typeDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTypeDeclaration(TypeDeclaration newTypeDeclaration, NotificationChain msgs)
  {
    TypeDeclaration oldTypeDeclaration = typeDeclaration;
    typeDeclaration = newTypeDeclaration;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyGoPackage.DECLARATIONS__TYPE_DECLARATION, oldTypeDeclaration, newTypeDeclaration);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTypeDeclaration(TypeDeclaration newTypeDeclaration)
  {
    if (newTypeDeclaration != typeDeclaration)
    {
      NotificationChain msgs = null;
      if (typeDeclaration != null)
        msgs = ((InternalEObject)typeDeclaration).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyGoPackage.DECLARATIONS__TYPE_DECLARATION, null, msgs);
      if (newTypeDeclaration != null)
        msgs = ((InternalEObject)newTypeDeclaration).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyGoPackage.DECLARATIONS__TYPE_DECLARATION, null, msgs);
      msgs = basicSetTypeDeclaration(newTypeDeclaration, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyGoPackage.DECLARATIONS__TYPE_DECLARATION, newTypeDeclaration, newTypeDeclaration));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION:
        return basicSetFunctionDeclaration(null, msgs);
      case MyGoPackage.DECLARATIONS__TYPE_DECLARATION:
        return basicSetTypeDeclaration(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION:
        return getFunctionDeclaration();
      case MyGoPackage.DECLARATIONS__TYPE_DECLARATION:
        return getTypeDeclaration();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION:
        setFunctionDeclaration((FunctionDeclaration)newValue);
        return;
      case MyGoPackage.DECLARATIONS__TYPE_DECLARATION:
        setTypeDeclaration((TypeDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION:
        setFunctionDeclaration((FunctionDeclaration)null);
        return;
      case MyGoPackage.DECLARATIONS__TYPE_DECLARATION:
        setTypeDeclaration((TypeDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyGoPackage.DECLARATIONS__FUNCTION_DECLARATION:
        return functionDeclaration != null;
      case MyGoPackage.DECLARATIONS__TYPE_DECLARATION:
        return typeDeclaration != null;
    }
    return super.eIsSet(featureID);
  }

} //DeclarationsImpl
