/**
 * generated by Xtext 2.14.0
 */
package org.xtext.compiler.go.myGo;

import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>For Range</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link org.xtext.compiler.go.myGo.ForRange#getId1 <em>Id1</em>}</li>
 *   <li>{@link org.xtext.compiler.go.myGo.ForRange#getExpression <em>Expression</em>}</li>
 *   <li>{@link org.xtext.compiler.go.myGo.ForRange#getLineCommand <em>Line Command</em>}</li>
 *   <li>{@link org.xtext.compiler.go.myGo.ForRange#getId2 <em>Id2</em>}</li>
 * </ul>
 * </p>
 *
 * @see org.xtext.compiler.go.myGo.MyGoPackage#getForRange()
 * @model
 * @generated
 */
public interface ForRange extends LineCommand
{
  /**
   * Returns the value of the '<em><b>Id1</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Id1</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Id1</em>' attribute.
   * @see #setId1(String)
   * @see org.xtext.compiler.go.myGo.MyGoPackage#getForRange_Id1()
   * @model
   * @generated
   */
  String getId1();

  /**
   * Sets the value of the '{@link org.xtext.compiler.go.myGo.ForRange#getId1 <em>Id1</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Id1</em>' attribute.
   * @see #getId1()
   * @generated
   */
  void setId1(String value);

  /**
   * Returns the value of the '<em><b>Expression</b></em>' containment reference.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Expression</em>' containment reference isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Expression</em>' containment reference.
   * @see #setExpression(Expression)
   * @see org.xtext.compiler.go.myGo.MyGoPackage#getForRange_Expression()
   * @model containment="true"
   * @generated
   */
  Expression getExpression();

  /**
   * Sets the value of the '{@link org.xtext.compiler.go.myGo.ForRange#getExpression <em>Expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Expression</em>' containment reference.
   * @see #getExpression()
   * @generated
   */
  void setExpression(Expression value);

  /**
   * Returns the value of the '<em><b>Line Command</b></em>' containment reference list.
   * The list contents are of type {@link org.xtext.compiler.go.myGo.LineCommand}.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Line Command</em>' containment reference list isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Line Command</em>' containment reference list.
   * @see org.xtext.compiler.go.myGo.MyGoPackage#getForRange_LineCommand()
   * @model containment="true"
   * @generated
   */
  EList<LineCommand> getLineCommand();

  /**
   * Returns the value of the '<em><b>Id2</b></em>' attribute.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of the '<em>Id2</em>' attribute isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @return the value of the '<em>Id2</em>' attribute.
   * @see #setId2(String)
   * @see org.xtext.compiler.go.myGo.MyGoPackage#getForRange_Id2()
   * @model
   * @generated
   */
  String getId2();

  /**
   * Sets the value of the '{@link org.xtext.compiler.go.myGo.ForRange#getId2 <em>Id2</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the new value of the '<em>Id2</em>' attribute.
   * @see #getId2()
   * @generated
   */
  void setId2(String value);

} // ForRange
