/*
 * generated by Xtext 2.14.0
 */
grammar InternalMyGo;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.compiler.go.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.compiler.go.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.compiler.go.services.MyGoGrammarAccess;

}

@parser::members {

 	private MyGoGrammarAccess grammarAccess;

    public InternalMyGoParser(TokenStream input, MyGoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyGoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getPackagePackageParserRuleCall_0_0());
				}
				lv_package_0_0=rulePackage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"package",
						lv_package_0_0,
						"org.xtext.compiler.go.MyGo.Package");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getImportsImportsParserRuleCall_1_0());
				}
				lv_imports_1_0=ruleImports
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"imports",
						lv_imports_1_0,
						"org.xtext.compiler.go.MyGo.Imports");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getDeclarationsDeclarationsParserRuleCall_2_0());
				}
				lv_declarations_2_0=ruleDeclarations
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					add(
						$current,
						"declarations",
						lv_declarations_2_0,
						"org.xtext.compiler.go.MyGo.Declarations");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDeclarations
entryRuleDeclarations returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationsRule()); }
	iv_ruleDeclarations=ruleDeclarations
	{ $current=$iv_ruleDeclarations.current; }
	EOF;

// Rule Declarations
ruleDeclarations returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationsAccess().getFunctionDeclarationFunctionDeclarationParserRuleCall_0_0());
				}
				lv_functionDeclaration_0_0=ruleFunctionDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationsRule());
					}
					set(
						$current,
						"functionDeclaration",
						lv_functionDeclaration_0_0,
						"org.xtext.compiler.go.MyGo.FunctionDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getDeclarationsAccess().getTypeDeclarationTypeDeclarationParserRuleCall_1_0());
				}
				lv_typeDeclaration_1_0=ruleTypeDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDeclarationsRule());
					}
					set(
						$current,
						"typeDeclaration",
						lv_typeDeclaration_1_0,
						"org.xtext.compiler.go.MyGo.TypeDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePackage
entryRulePackage returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current.getText(); }
	EOF;

// Rule Package
rulePackage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getPackageAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleImports
entryRuleImports returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportsRule()); }
	iv_ruleImports=ruleImports
	{ $current=$iv_ruleImports.current.getText(); }
	EOF;

// Rule Imports
ruleImports returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImportsAccess().getImportKeyword_0());
		}
		this_STRING_1=RULE_STRING
		{
			$current.merge(this_STRING_1);
		}
		{
			newLeafNode(this_STRING_1, grammarAccess.getImportsAccess().getSTRINGTerminalRuleCall_1());
		}
	)*
;

// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	iv_ruleFunctionDeclaration=ruleFunctionDeclaration
	{ $current=$iv_ruleFunctionDeclaration.current; }
	EOF;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionDeclarationAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getReceiverReceiverParserRuleCall_1_0());
				}
				lv_receiver_1_0=ruleReceiver
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"receiver",
						lv_receiver_1_0,
						"org.xtext.compiler.go.MyGo.Receiver");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_id_2_0=RULE_ID
				{
					newLeafNode(lv_id_2_0, grammarAccess.getFunctionDeclarationAccess().getIdIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParametersParametersDeclarationParserRuleCall_4_0());
				}
				lv_parameters_4_0=ruleParametersDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"parameters",
						lv_parameters_4_0,
						"org.xtext.compiler.go.MyGo.ParametersDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_6_0());
				}
				lv_type_6_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_6_0,
						"org.xtext.compiler.go.MyGo.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='{'
		{
			newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getBodyBodyParserRuleCall_8_0());
				}
				lv_body_8_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
					}
					set(
						$current,
						"body",
						lv_body_8_0,
						"org.xtext.compiler.go.MyGo.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleReceiver
entryRuleReceiver returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_ruleReceiver=ruleReceiver
	{ $current=$iv_ruleReceiver.current; }
	EOF;

// Rule Receiver
ruleReceiver returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getReceiverAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_idName_1_0=RULE_ID
				{
					newLeafNode(lv_idName_1_0, grammarAccess.getReceiverAccess().getIdNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReceiverRule());
					}
					setWithLastConsumed(
						$current,
						"idName",
						lv_idName_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_idType_2_0=RULE_ID
				{
					newLeafNode(lv_idType_2_0, grammarAccess.getReceiverAccess().getIdTypeIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReceiverRule());
					}
					setWithLastConsumed(
						$current,
						"idType",
						lv_idType_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getReceiverAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBodyAccess().getBodyAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBodyAccess().getLineCommandLineCommandParserRuleCall_1_0());
				}
				lv_lineCommand_1_0=ruleLineCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBodyRule());
					}
					add(
						$current,
						"lineCommand",
						lv_lineCommand_1_0,
						"org.xtext.compiler.go.MyGo.LineCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLineCommand
entryRuleLineCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLineCommandRule()); }
	iv_ruleLineCommand=ruleLineCommand
	{ $current=$iv_ruleLineCommand.current; }
	EOF;

// Rule LineCommand
ruleLineCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLineCommandAccess().getFuncCallParserRuleCall_0_0());
			}
			this_FuncCall_0=ruleFuncCall
			{
				$current = $this_FuncCall_0.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_1=';'
				{
					newLeafNode(otherlv_1, grammarAccess.getLineCommandAccess().getSemicolonKeyword_0_1());
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getLineCommandAccess().getVariableDeclarationParserRuleCall_1_0());
			}
			this_VariableDeclaration_2=ruleVariableDeclaration
			{
				$current = $this_VariableDeclaration_2.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getLineCommandAccess().getSemicolonKeyword_1_1());
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getLineCommandAccess().getReturnStatementParserRuleCall_2_0());
			}
			this_ReturnStatement_4=ruleReturnStatement
			{
				$current = $this_ReturnStatement_4.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_5=';'
				{
					newLeafNode(otherlv_5, grammarAccess.getLineCommandAccess().getSemicolonKeyword_2_1());
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getLineCommandAccess().getForRangeParserRuleCall_3_0());
			}
			this_ForRange_6=ruleForRange
			{
				$current = $this_ForRange_6.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_7=';'
				{
					newLeafNode(otherlv_7, grammarAccess.getLineCommandAccess().getSemicolonKeyword_3_1());
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getLineCommandAccess().getAssignmentParserRuleCall_4_0());
			}
			this_Assignment_8=ruleAssignment
			{
				$current = $this_Assignment_8.current;
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_9=';'
				{
					newLeafNode(otherlv_9, grammarAccess.getLineCommandAccess().getSemicolonKeyword_4_1());
				}
			)?
		)
	)
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getAssignmentAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssignmentRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssignmentAccess().getExpressionExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAssignmentRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.xtext.compiler.go.MyGo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForRange
entryRuleForRange returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForRangeRule()); }
	iv_ruleForRange=ruleForRange
	{ $current=$iv_ruleForRange.current; }
	EOF;

// Rule ForRange
ruleForRange returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='for'
			{
				newLeafNode(otherlv_0, grammarAccess.getForRangeAccess().getForKeyword_0_0());
			}
			(
				(
					lv_id1_1_0=RULE_ID
					{
						newLeafNode(lv_id1_1_0, grammarAccess.getForRangeAccess().getId1IDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForRangeRule());
						}
						setWithLastConsumed(
							$current,
							"id1",
							lv_id1_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getForRangeAccess().getColonEqualsSignKeyword_0_2());
			}
			otherlv_3='range'
			{
				newLeafNode(otherlv_3, grammarAccess.getForRangeAccess().getRangeKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForRangeAccess().getExpressionExpressionParserRuleCall_0_4_0());
					}
					lv_expression_4_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForRangeRule());
						}
						set(
							$current,
							"expression",
							lv_expression_4_0,
							"org.xtext.compiler.go.MyGo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getForRangeAccess().getLeftCurlyBracketKeyword_0_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForRangeAccess().getLineCommandLineCommandParserRuleCall_0_6_0());
					}
					lv_lineCommand_6_0=ruleLineCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForRangeRule());
						}
						add(
							$current,
							"lineCommand",
							lv_lineCommand_6_0,
							"org.xtext.compiler.go.MyGo.LineCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getForRangeAccess().getRightCurlyBracketKeyword_0_7());
			}
		)
		    |
		(
			otherlv_8='for'
			{
				newLeafNode(otherlv_8, grammarAccess.getForRangeAccess().getForKeyword_1_0());
			}
			(
				(
					lv_id1_9_0=RULE_ID
					{
						newLeafNode(lv_id1_9_0, grammarAccess.getForRangeAccess().getId1IDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForRangeRule());
						}
						setWithLastConsumed(
							$current,
							"id1",
							lv_id1_9_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_10=','
			{
				newLeafNode(otherlv_10, grammarAccess.getForRangeAccess().getCommaKeyword_1_2());
			}
			(
				(
					lv_id2_11_0=RULE_ID
					{
						newLeafNode(lv_id2_11_0, grammarAccess.getForRangeAccess().getId2IDTerminalRuleCall_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForRangeRule());
						}
						setWithLastConsumed(
							$current,
							"id2",
							lv_id2_11_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_12=':='
			{
				newLeafNode(otherlv_12, grammarAccess.getForRangeAccess().getColonEqualsSignKeyword_1_4());
			}
			otherlv_13='range'
			{
				newLeafNode(otherlv_13, grammarAccess.getForRangeAccess().getRangeKeyword_1_5());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForRangeAccess().getExpressionExpressionParserRuleCall_1_6_0());
					}
					lv_expression_14_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForRangeRule());
						}
						set(
							$current,
							"expression",
							lv_expression_14_0,
							"org.xtext.compiler.go.MyGo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_15='{'
			{
				newLeafNode(otherlv_15, grammarAccess.getForRangeAccess().getLeftCurlyBracketKeyword_1_7());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForRangeAccess().getLineCommandLineCommandParserRuleCall_1_8_0());
					}
					lv_lineCommand_16_0=ruleLineCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForRangeRule());
						}
						add(
							$current,
							"lineCommand",
							lv_lineCommand_16_0,
							"org.xtext.compiler.go.MyGo.LineCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_17='}'
			{
				newLeafNode(otherlv_17, grammarAccess.getForRangeAccess().getRightCurlyBracketKeyword_1_9());
			}
		)
	)
;

// Entry rule entryRuleParametersDeclaration
entryRuleParametersDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersDeclarationRule()); }
	iv_ruleParametersDeclaration=ruleParametersDeclaration
	{ $current=$iv_ruleParametersDeclaration.current; }
	EOF;

// Rule ParametersDeclaration
ruleParametersDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getParametersDeclarationAccess().getIdTypeIdTypeParserRuleCall_0_0());
				}
				lv_idType_0_0=ruleIdType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getParametersDeclarationRule());
					}
					add(
						$current,
						"idType",
						lv_idType_0_0,
						"org.xtext.compiler.go.MyGo.IdType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getParametersDeclarationAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getParametersDeclarationAccess().getIdTypeIdTypeParserRuleCall_1_1_0());
					}
					lv_idType_2_0=ruleIdType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametersDeclarationRule());
						}
						add(
							$current,
							"idType",
							lv_idType_2_0,
							"org.xtext.compiler.go.MyGo.IdType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleParametersValues
entryRuleParametersValues returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getParametersValuesRule()); }
	iv_ruleParametersValues=ruleParametersValues
	{ $current=$iv_ruleParametersValues.current; }
	EOF;

// Rule ParametersValues
ruleParametersValues returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getParametersValuesAccess().getParametersValuesAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getParametersValuesAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getParametersValuesRule());
						}
						add(
							$current,
							"expression",
							lv_expression_1_0,
							"org.xtext.compiler.go.MyGo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getParametersValuesAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getParametersValuesAccess().getExpressionExpressionParserRuleCall_1_1_1_0());
						}
						lv_expression_3_0=ruleExpression
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getParametersValuesRule());
							}
							add(
								$current,
								"expression",
								lv_expression_3_0,
								"org.xtext.compiler.go.MyGo.Expression");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntKeyword_0());
		}
		    |
		kw='float64'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getFloat64Keyword_1());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getBoolKeyword_2());
		}
		    |
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_3());
		}
		    |
		this_ID_4=RULE_ID
		{
			$current.merge(this_ID_4);
		}
		{
			newLeafNode(this_ID_4, grammarAccess.getTypeAccess().getIDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleTypeDeclaration
entryRuleTypeDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeDeclarationRule()); }
	iv_ruleTypeDeclaration=ruleTypeDeclaration
	{ $current=$iv_ruleTypeDeclaration.current; }
	EOF;

// Rule TypeDeclaration
ruleTypeDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='type'
		{
			newLeafNode(otherlv_0, grammarAccess.getTypeDeclarationAccess().getTypeKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getTypeDeclarationAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTypeDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTypeDeclarationAccess().getTypeTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTypeDeclarationRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.xtext.compiler.go.MyGo.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getIntValueIntValueParserRuleCall_0_0());
				}
				lv_intValue_0_0=ruleIntValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"intValue",
						lv_intValue_0_0,
						"org.xtext.compiler.go.MyGo.IntValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getFloatValueFloatValueParserRuleCall_1_0());
				}
				lv_floatValue_1_0=ruleFloatValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"floatValue",
						lv_floatValue_1_0,
						"org.xtext.compiler.go.MyGo.FloatValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getStringValueStringValueParserRuleCall_2_0());
				}
				lv_stringValue_2_0=ruleStringValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"stringValue",
						lv_stringValue_2_0,
						"org.xtext.compiler.go.MyGo.StringValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getValueAccess().getBoolValueBoolValueParserRuleCall_3_0());
				}
				lv_boolValue_3_0=ruleBoolValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getValueRule());
					}
					set(
						$current,
						"boolValue",
						lv_boolValue_3_0,
						"org.xtext.compiler.go.MyGo.BoolValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntValue
entryRuleIntValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIntValueRule()); }
	iv_ruleIntValue=ruleIntValue
	{ $current=$iv_ruleIntValue.current.getText(); }
	EOF;

// Rule IntValue
ruleIntValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getIntValueAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleFloatValue
entryRuleFloatValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFloatValueRule()); }
	iv_ruleFloatValue=ruleFloatValue
	{ $current=$iv_ruleFloatValue.current.getText(); }
	EOF;

// Rule FloatValue
ruleFloatValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getFloatValueAccess().getINTTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFloatValueAccess().getFullStopKeyword_1());
		}
		this_INT_2=RULE_INT
		{
			$current.merge(this_INT_2);
		}
		{
			newLeafNode(this_INT_2, grammarAccess.getFloatValueAccess().getINTTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current.getText(); }
	EOF;

// Rule StringValue
ruleStringValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getStringValueAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleBoolValue
entryRuleBoolValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolValueRule()); }
	iv_ruleBoolValue=ruleBoolValue
	{ $current=$iv_ruleBoolValue.current.getText(); }
	EOF;

// Rule BoolValue
ruleBoolValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolValueAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolValueAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleIdType
entryRuleIdType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIdTypeRule()); }
	iv_ruleIdType=ruleIdType
	{ $current=$iv_ruleIdType.current; }
	EOF;

// Rule IdType
ruleIdType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getIdTypeAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIdTypeRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIdTypeAccess().getTypeTypeParserRuleCall_1_0());
				}
				lv_type_1_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIdTypeRule());
					}
					set(
						$current,
						"type",
						lv_type_1_0,
						"org.xtext.compiler.go.MyGo.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleFuncCall
entryRuleFuncCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncCallRule()); }
	iv_ruleFuncCall=ruleFuncCall
	{ $current=$iv_ruleFuncCall.current; }
	EOF;

// Rule FuncCall
ruleFuncCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncCallAccess().getReceiverInstanceReceiverInstanceParserRuleCall_0_0());
				}
				lv_receiverInstance_0_0=ruleReceiverInstance
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncCallRule());
					}
					set(
						$current,
						"receiverInstance",
						lv_receiverInstance_0_0,
						"org.xtext.compiler.go.MyGo.ReceiverInstance");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getFuncCallAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncCallRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getFuncCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncCallAccess().getParametersValuesParametersValuesParserRuleCall_3_0());
				}
				lv_parametersValues_3_0=ruleParametersValues
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncCallRule());
					}
					set(
						$current,
						"parametersValues",
						lv_parametersValues_3_0,
						"org.xtext.compiler.go.MyGo.ParametersValues");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getFuncCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleReceiverInstance
entryRuleReceiverInstance returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReceiverInstanceRule()); }
	iv_ruleReceiverInstance=ruleReceiverInstance
	{ $current=$iv_ruleReceiverInstance.current; }
	EOF;

// Rule ReceiverInstance
ruleReceiverInstance returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getReceiverInstanceAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReceiverInstanceRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getReceiverInstanceAccess().getFullStopKeyword_1());
		}
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getExpression2ParserRuleCall_0());
		}
		this_Expression2_0=ruleExpression2
		{
			$current = $this_Expression2_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getBinaryOpBinaryOpPrecedence1ParserRuleCall_1_1_0());
					}
					lv_binaryOp_2_0=ruleBinaryOpPrecedence1
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"binaryOp",
							lv_binaryOp_2_0,
							"org.xtext.compiler.go.MyGo.BinaryOpPrecedence1");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightExpression2ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.compiler.go.MyGo.Expression2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression2
entryRuleExpression2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression2Rule()); }
	iv_ruleExpression2=ruleExpression2
	{ $current=$iv_ruleExpression2.current; }
	EOF;

// Rule Expression2
ruleExpression2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression2Access().getExpression3ParserRuleCall_0());
		}
		this_Expression3_0=ruleExpression3
		{
			$current = $this_Expression3_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression2Access().getExpression2LeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression2Access().getBinaryOpBinaryOpPrecedence2ParserRuleCall_1_1_0());
					}
					lv_binaryOp_2_0=ruleBinaryOpPrecedence2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression2Rule());
						}
						set(
							$current,
							"binaryOp",
							lv_binaryOp_2_0,
							"org.xtext.compiler.go.MyGo.BinaryOpPrecedence2");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression2Access().getRightExpression3ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression3
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression2Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.compiler.go.MyGo.Expression3");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression3
entryRuleExpression3 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression3Rule()); }
	iv_ruleExpression3=ruleExpression3
	{ $current=$iv_ruleExpression3.current; }
	EOF;

// Rule Expression3
ruleExpression3 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression3Access().getExpression4ParserRuleCall_0());
		}
		this_Expression4_0=ruleExpression4
		{
			$current = $this_Expression4_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression3Access().getExpression3LeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression3Access().getBinaryOpBinaryOpPrecedence3ParserRuleCall_1_1_0());
					}
					lv_binaryOp_2_0=ruleBinaryOpPrecedence3
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression3Rule());
						}
						set(
							$current,
							"binaryOp",
							lv_binaryOp_2_0,
							"org.xtext.compiler.go.MyGo.BinaryOpPrecedence3");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression3Access().getRightExpression4ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression4
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression3Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.compiler.go.MyGo.Expression4");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression4
entryRuleExpression4 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression4Rule()); }
	iv_ruleExpression4=ruleExpression4
	{ $current=$iv_ruleExpression4.current; }
	EOF;

// Rule Expression4
ruleExpression4 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression4Access().getExpression5ParserRuleCall_0());
		}
		this_Expression5_0=ruleExpression5
		{
			$current = $this_Expression5_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression4Access().getExpression4LeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression4Access().getBinaryOpBinaryOpPrecedence4ParserRuleCall_1_1_0());
					}
					lv_binaryOp_2_0=ruleBinaryOpPrecedence4
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression4Rule());
						}
						set(
							$current,
							"binaryOp",
							lv_binaryOp_2_0,
							"org.xtext.compiler.go.MyGo.BinaryOpPrecedence4");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression4Access().getRightExpression5ParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleExpression5
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression4Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.compiler.go.MyGo.Expression5");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpression5
entryRuleExpression5 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpression5Rule()); }
	iv_ruleExpression5=ruleExpression5
	{ $current=$iv_ruleExpression5.current; }
	EOF;

// Rule Expression5
ruleExpression5 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpression5Access().getUnaryExprParserRuleCall_0());
		}
		this_UnaryExpr_0=ruleUnaryExpr
		{
			$current = $this_UnaryExpr_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpression5Access().getExpression5LeftAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression5Access().getBinaryOpBinaryOpPrecedence5ParserRuleCall_1_1_0());
					}
					lv_binaryOp_2_0=ruleBinaryOpPrecedence5
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression5Rule());
						}
						set(
							$current,
							"binaryOp",
							lv_binaryOp_2_0,
							"org.xtext.compiler.go.MyGo.BinaryOpPrecedence5");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpression5Access().getRightUnaryExprParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpression5Rule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.compiler.go.MyGo.UnaryExpr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpr
entryRuleUnaryExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExprRule()); }
	iv_ruleUnaryExpr=ruleUnaryExpr
	{ $current=$iv_ruleUnaryExpr.current; }
	EOF;

// Rule UnaryExpr
ruleUnaryExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getUnaryExprAccess().getValueParserRuleCall_0());
		}
		this_Value_0=ruleValue
		{
			$current = $this_Value_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExprAccess().getVariableParserRuleCall_1());
		}
		this_Variable_1=ruleVariable
		{
			$current = $this_Variable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExprAccess().getFuncCallParserRuleCall_2());
		}
		this_FuncCall_2=ruleFuncCall
		{
			$current = $this_FuncCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getUnaryExprAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getUnaryExprAccess().getExpressionParserRuleCall_3_1());
			}
			this_Expression_4=ruleExpression
			{
				$current = $this_Expression_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getUnaryExprAccess().getRightParenthesisKeyword_3_2());
			}
		)
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_id_0_0=RULE_ID
			{
				newLeafNode(lv_id_0_0, grammarAccess.getVariableAccess().getIdIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableRule());
				}
				setWithLastConsumed(
					$current,
					"id",
					lv_id_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBinaryOpPrecedence1
entryRuleBinaryOpPrecedence1 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOpPrecedence1Rule()); }
	iv_ruleBinaryOpPrecedence1=ruleBinaryOpPrecedence1
	{ $current=$iv_ruleBinaryOpPrecedence1.current.getText(); }
	EOF;

// Rule BinaryOpPrecedence1
ruleBinaryOpPrecedence1 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='||'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBinaryOpPrecedence1Access().getVerticalLineVerticalLineKeyword());
	}
;

// Entry rule entryRuleBinaryOpPrecedence2
entryRuleBinaryOpPrecedence2 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOpPrecedence2Rule()); }
	iv_ruleBinaryOpPrecedence2=ruleBinaryOpPrecedence2
	{ $current=$iv_ruleBinaryOpPrecedence2.current.getText(); }
	EOF;

// Rule BinaryOpPrecedence2
ruleBinaryOpPrecedence2 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='&&'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getBinaryOpPrecedence2Access().getAmpersandAmpersandKeyword());
	}
;

// Entry rule entryRuleBinaryOpPrecedence3
entryRuleBinaryOpPrecedence3 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOpPrecedence3Rule()); }
	iv_ruleBinaryOpPrecedence3=ruleBinaryOpPrecedence3
	{ $current=$iv_ruleBinaryOpPrecedence3.current.getText(); }
	EOF;

// Rule BinaryOpPrecedence3
ruleBinaryOpPrecedence3 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence3Access().getEqualsSignEqualsSignKeyword_0());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence3Access().getExclamationMarkEqualsSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence3Access().getLessThanSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence3Access().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence3Access().getGreaterThanSignKeyword_4());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence3Access().getGreaterThanSignEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleBinaryOpPrecedence4
entryRuleBinaryOpPrecedence4 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOpPrecedence4Rule()); }
	iv_ruleBinaryOpPrecedence4=ruleBinaryOpPrecedence4
	{ $current=$iv_ruleBinaryOpPrecedence4.current.getText(); }
	EOF;

// Rule BinaryOpPrecedence4
ruleBinaryOpPrecedence4 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='+'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence4Access().getPlusSignKeyword_0());
		}
		    |
		kw='-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence4Access().getHyphenMinusKeyword_1());
		}
		    |
		kw='|'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence4Access().getVerticalLineKeyword_2());
		}
		    |
		kw='^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence4Access().getCircumflexAccentKeyword_3());
		}
	)
;

// Entry rule entryRuleBinaryOpPrecedence5
entryRuleBinaryOpPrecedence5 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBinaryOpPrecedence5Rule()); }
	iv_ruleBinaryOpPrecedence5=ruleBinaryOpPrecedence5
	{ $current=$iv_ruleBinaryOpPrecedence5.current.getText(); }
	EOF;

// Rule BinaryOpPrecedence5
ruleBinaryOpPrecedence5 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='*'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getAsteriskKeyword_0());
		}
		    |
		kw='/'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getSolidusKeyword_1());
		}
		    |
		kw='%'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getPercentSignKeyword_2());
		}
		    |
		kw='<<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getLessThanSignLessThanSignKeyword_3());
		}
		    |
		kw='>>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getGreaterThanSignGreaterThanSignKeyword_4());
		}
		    |
		kw='&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getAmpersandKeyword_5());
		}
		    |
		kw='&^'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBinaryOpPrecedence5Access().getAmpersandCircumflexAccentKeyword_6());
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='var'
			{
				newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0_0());
			}
			(
				(
					lv_ids_1_0=RULE_ID
					{
						newLeafNode(lv_ids_1_0, grammarAccess.getVariableDeclarationAccess().getIdsIDTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"ids",
							lv_ids_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getCommaKeyword_0_2_0());
				}
				(
					(
						lv_ids_3_0=RULE_ID
						{
							newLeafNode(lv_ids_3_0, grammarAccess.getVariableDeclarationAccess().getIdsIDTerminalRuleCall_0_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableDeclarationRule());
							}
							addWithLastConsumed(
								$current,
								"ids",
								lv_ids_3_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
			otherlv_4='='
			{
				newLeafNode(otherlv_4, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_0_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_0_4_0());
					}
					lv_expression_5_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"org.xtext.compiler.go.MyGo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_6='var'
			{
				newLeafNode(otherlv_6, grammarAccess.getVariableDeclarationAccess().getVarKeyword_1_0());
			}
			(
				(
					lv_ids_7_0=RULE_ID
					{
						newLeafNode(lv_ids_7_0, grammarAccess.getVariableDeclarationAccess().getIdsIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"ids",
							lv_ids_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_8=','
				{
					newLeafNode(otherlv_8, grammarAccess.getVariableDeclarationAccess().getCommaKeyword_1_2_0());
				}
				(
					(
						lv_ids_9_0=RULE_ID
						{
							newLeafNode(lv_ids_9_0, grammarAccess.getVariableDeclarationAccess().getIdsIDTerminalRuleCall_1_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableDeclarationRule());
							}
							addWithLastConsumed(
								$current,
								"ids",
								lv_ids_9_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_1_3_0());
					}
					lv_type_10_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_10_0,
							"org.xtext.compiler.go.MyGo.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			otherlv_11='var'
			{
				newLeafNode(otherlv_11, grammarAccess.getVariableDeclarationAccess().getVarKeyword_2_0());
			}
			(
				(
					lv_ids_12_0=RULE_ID
					{
						newLeafNode(lv_ids_12_0, grammarAccess.getVariableDeclarationAccess().getIdsIDTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVariableDeclarationRule());
						}
						addWithLastConsumed(
							$current,
							"ids",
							lv_ids_12_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				otherlv_13=','
				{
					newLeafNode(otherlv_13, grammarAccess.getVariableDeclarationAccess().getCommaKeyword_2_2_0());
				}
				(
					(
						lv_ids_14_0=RULE_ID
						{
							newLeafNode(lv_ids_14_0, grammarAccess.getVariableDeclarationAccess().getIdsIDTerminalRuleCall_2_2_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getVariableDeclarationRule());
							}
							addWithLastConsumed(
								$current,
								"ids",
								lv_ids_14_0,
								"org.eclipse.xtext.common.Terminals.ID");
						}
					)
				)
			)*
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getTypeTypeParserRuleCall_2_3_0());
					}
					lv_type_15_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"type",
							lv_type_15_0,
							"org.xtext.compiler.go.MyGo.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_16='='
			{
				newLeafNode(otherlv_16, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2_4());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableDeclarationAccess().getExpressionExpressionParserRuleCall_2_5_0());
					}
					lv_expression_17_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableDeclarationRule());
						}
						set(
							$current,
							"expression",
							lv_expression_17_0,
							"org.xtext.compiler.go.MyGo.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='return'
		{
			newLeafNode(otherlv_0, grammarAccess.getReturnStatementAccess().getReturnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.compiler.go.MyGo.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
