/*
 * generated by Xtext 2.14.0
 */
package org.xtext.compiler.go.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.compiler.go.ide.contentassist.antlr.internal.InternalMyGoParser;
import org.xtext.compiler.go.services.MyGoGrammarAccess;

public class MyGoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyGoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyGoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getDeclarationsAccess().getAlternatives(), "rule__Declarations__Alternatives");
			builder.put(grammarAccess.getLineCommandAccess().getAlternatives(), "rule__LineCommand__Alternatives");
			builder.put(grammarAccess.getForRangeAccess().getAlternatives(), "rule__ForRange__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBoolValueAccess().getAlternatives(), "rule__BoolValue__Alternatives");
			builder.put(grammarAccess.getUnaryExprAccess().getAlternatives(), "rule__UnaryExpr__Alternatives");
			builder.put(grammarAccess.getBinaryOpPrecedence3Access().getAlternatives(), "rule__BinaryOpPrecedence3__Alternatives");
			builder.put(grammarAccess.getBinaryOpPrecedence4Access().getAlternatives(), "rule__BinaryOpPrecedence4__Alternatives");
			builder.put(grammarAccess.getBinaryOpPrecedence5Access().getAlternatives(), "rule__BinaryOpPrecedence5__Alternatives");
			builder.put(grammarAccess.getVariableDeclarationAccess().getAlternatives(), "rule__VariableDeclaration__Alternatives");
			builder.put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getImportsAccess().getGroup(), "rule__Imports__Group__0");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
			builder.put(grammarAccess.getReceiverAccess().getGroup(), "rule__Receiver__Group__0");
			builder.put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
			builder.put(grammarAccess.getLineCommandAccess().getGroup_0(), "rule__LineCommand__Group_0__0");
			builder.put(grammarAccess.getLineCommandAccess().getGroup_1(), "rule__LineCommand__Group_1__0");
			builder.put(grammarAccess.getLineCommandAccess().getGroup_2(), "rule__LineCommand__Group_2__0");
			builder.put(grammarAccess.getLineCommandAccess().getGroup_3(), "rule__LineCommand__Group_3__0");
			builder.put(grammarAccess.getLineCommandAccess().getGroup_4(), "rule__LineCommand__Group_4__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getForRangeAccess().getGroup_0(), "rule__ForRange__Group_0__0");
			builder.put(grammarAccess.getForRangeAccess().getGroup_1(), "rule__ForRange__Group_1__0");
			builder.put(grammarAccess.getParametersDeclarationAccess().getGroup(), "rule__ParametersDeclaration__Group__0");
			builder.put(grammarAccess.getParametersDeclarationAccess().getGroup_1(), "rule__ParametersDeclaration__Group_1__0");
			builder.put(grammarAccess.getParametersValuesAccess().getGroup(), "rule__ParametersValues__Group__0");
			builder.put(grammarAccess.getParametersValuesAccess().getGroup_1(), "rule__ParametersValues__Group_1__0");
			builder.put(grammarAccess.getParametersValuesAccess().getGroup_1_1(), "rule__ParametersValues__Group_1_1__0");
			builder.put(grammarAccess.getTypeDeclarationAccess().getGroup(), "rule__TypeDeclaration__Group__0");
			builder.put(grammarAccess.getFloatValueAccess().getGroup(), "rule__FloatValue__Group__0");
			builder.put(grammarAccess.getIdTypeAccess().getGroup(), "rule__IdType__Group__0");
			builder.put(grammarAccess.getFuncCallAccess().getGroup(), "rule__FuncCall__Group__0");
			builder.put(grammarAccess.getReceiverInstanceAccess().getGroup(), "rule__ReceiverInstance__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getExpression2Access().getGroup(), "rule__Expression2__Group__0");
			builder.put(grammarAccess.getExpression2Access().getGroup_1(), "rule__Expression2__Group_1__0");
			builder.put(grammarAccess.getExpression3Access().getGroup(), "rule__Expression3__Group__0");
			builder.put(grammarAccess.getExpression3Access().getGroup_1(), "rule__Expression3__Group_1__0");
			builder.put(grammarAccess.getExpression4Access().getGroup(), "rule__Expression4__Group__0");
			builder.put(grammarAccess.getExpression4Access().getGroup_1(), "rule__Expression4__Group_1__0");
			builder.put(grammarAccess.getExpression5Access().getGroup(), "rule__Expression5__Group__0");
			builder.put(grammarAccess.getExpression5Access().getGroup_1(), "rule__Expression5__Group_1__0");
			builder.put(grammarAccess.getUnaryExprAccess().getGroup_3(), "rule__UnaryExpr__Group_3__0");
			builder.put(grammarAccess.getExplicitCastAccess().getGroup(), "rule__ExplicitCast__Group__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_0(), "rule__VariableDeclaration__Group_0__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_0_2(), "rule__VariableDeclaration__Group_0_2__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_1(), "rule__VariableDeclaration__Group_1__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_1_2(), "rule__VariableDeclaration__Group_1_2__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_2(), "rule__VariableDeclaration__Group_2__0");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup_2_2(), "rule__VariableDeclaration__Group_2_2__0");
			builder.put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
			builder.put(grammarAccess.getModelAccess().getPackageAssignment_0(), "rule__Model__PackageAssignment_0");
			builder.put(grammarAccess.getModelAccess().getImportsAssignment_1(), "rule__Model__ImportsAssignment_1");
			builder.put(grammarAccess.getModelAccess().getDeclarationsAssignment_2(), "rule__Model__DeclarationsAssignment_2");
			builder.put(grammarAccess.getDeclarationsAccess().getFunctionDeclarationAssignment_0(), "rule__Declarations__FunctionDeclarationAssignment_0");
			builder.put(grammarAccess.getDeclarationsAccess().getTypeDeclarationAssignment_1(), "rule__Declarations__TypeDeclarationAssignment_1");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getReceiverAssignment_1(), "rule__FunctionDeclaration__ReceiverAssignment_1");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getIdAssignment_2(), "rule__FunctionDeclaration__IdAssignment_2");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getParametersAssignment_4(), "rule__FunctionDeclaration__ParametersAssignment_4");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_6(), "rule__FunctionDeclaration__TypeAssignment_6");
			builder.put(grammarAccess.getFunctionDeclarationAccess().getBodyAssignment_8(), "rule__FunctionDeclaration__BodyAssignment_8");
			builder.put(grammarAccess.getReceiverAccess().getIdNameAssignment_1(), "rule__Receiver__IdNameAssignment_1");
			builder.put(grammarAccess.getReceiverAccess().getIdTypeAssignment_2(), "rule__Receiver__IdTypeAssignment_2");
			builder.put(grammarAccess.getBodyAccess().getLineCommandAssignment_1(), "rule__Body__LineCommandAssignment_1");
			builder.put(grammarAccess.getAssignmentAccess().getIdAssignment_0(), "rule__Assignment__IdAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getExpressionAssignment_2(), "rule__Assignment__ExpressionAssignment_2");
			builder.put(grammarAccess.getForRangeAccess().getId1Assignment_0_1(), "rule__ForRange__Id1Assignment_0_1");
			builder.put(grammarAccess.getForRangeAccess().getExpressionAssignment_0_4(), "rule__ForRange__ExpressionAssignment_0_4");
			builder.put(grammarAccess.getForRangeAccess().getLineCommandAssignment_0_6(), "rule__ForRange__LineCommandAssignment_0_6");
			builder.put(grammarAccess.getForRangeAccess().getId1Assignment_1_1(), "rule__ForRange__Id1Assignment_1_1");
			builder.put(grammarAccess.getForRangeAccess().getId2Assignment_1_3(), "rule__ForRange__Id2Assignment_1_3");
			builder.put(grammarAccess.getForRangeAccess().getExpressionAssignment_1_6(), "rule__ForRange__ExpressionAssignment_1_6");
			builder.put(grammarAccess.getForRangeAccess().getLineCommandAssignment_1_8(), "rule__ForRange__LineCommandAssignment_1_8");
			builder.put(grammarAccess.getParametersDeclarationAccess().getIdTypeAssignment_0(), "rule__ParametersDeclaration__IdTypeAssignment_0");
			builder.put(grammarAccess.getParametersDeclarationAccess().getIdTypeAssignment_1_1(), "rule__ParametersDeclaration__IdTypeAssignment_1_1");
			builder.put(grammarAccess.getParametersValuesAccess().getExpressionAssignment_1_0(), "rule__ParametersValues__ExpressionAssignment_1_0");
			builder.put(grammarAccess.getParametersValuesAccess().getExpressionAssignment_1_1_1(), "rule__ParametersValues__ExpressionAssignment_1_1_1");
			builder.put(grammarAccess.getTypeDeclarationAccess().getIdAssignment_1(), "rule__TypeDeclaration__IdAssignment_1");
			builder.put(grammarAccess.getTypeDeclarationAccess().getTypeAssignment_2(), "rule__TypeDeclaration__TypeAssignment_2");
			builder.put(grammarAccess.getValueAccess().getIntValueAssignment_0(), "rule__Value__IntValueAssignment_0");
			builder.put(grammarAccess.getValueAccess().getFloatValueAssignment_1(), "rule__Value__FloatValueAssignment_1");
			builder.put(grammarAccess.getValueAccess().getStringValueAssignment_2(), "rule__Value__StringValueAssignment_2");
			builder.put(grammarAccess.getValueAccess().getBoolValueAssignment_3(), "rule__Value__BoolValueAssignment_3");
			builder.put(grammarAccess.getIdTypeAccess().getIdAssignment_0(), "rule__IdType__IdAssignment_0");
			builder.put(grammarAccess.getIdTypeAccess().getTypeAssignment_1(), "rule__IdType__TypeAssignment_1");
			builder.put(grammarAccess.getFuncCallAccess().getReceiverInstanceAssignment_0(), "rule__FuncCall__ReceiverInstanceAssignment_0");
			builder.put(grammarAccess.getFuncCallAccess().getIdAssignment_1(), "rule__FuncCall__IdAssignment_1");
			builder.put(grammarAccess.getFuncCallAccess().getParametersValuesAssignment_3(), "rule__FuncCall__ParametersValuesAssignment_3");
			builder.put(grammarAccess.getReceiverInstanceAccess().getIdAssignment_0(), "rule__ReceiverInstance__IdAssignment_0");
			builder.put(grammarAccess.getExpressionAccess().getBinaryOpAssignment_1_1(), "rule__Expression__BinaryOpAssignment_1_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression2Access().getBinaryOpAssignment_1_1(), "rule__Expression2__BinaryOpAssignment_1_1");
			builder.put(grammarAccess.getExpression2Access().getRightAssignment_1_2(), "rule__Expression2__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression3Access().getBinaryOpAssignment_1_1(), "rule__Expression3__BinaryOpAssignment_1_1");
			builder.put(grammarAccess.getExpression3Access().getRightAssignment_1_2(), "rule__Expression3__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression4Access().getBinaryOpAssignment_1_1(), "rule__Expression4__BinaryOpAssignment_1_1");
			builder.put(grammarAccess.getExpression4Access().getRightAssignment_1_2(), "rule__Expression4__RightAssignment_1_2");
			builder.put(grammarAccess.getExpression5Access().getBinaryOpAssignment_1_1(), "rule__Expression5__BinaryOpAssignment_1_1");
			builder.put(grammarAccess.getExpression5Access().getRightAssignment_1_2(), "rule__Expression5__RightAssignment_1_2");
			builder.put(grammarAccess.getExplicitCastAccess().getTypeAssignment_0(), "rule__ExplicitCast__TypeAssignment_0");
			builder.put(grammarAccess.getExplicitCastAccess().getExpressionAssignment_2(), "rule__ExplicitCast__ExpressionAssignment_2");
			builder.put(grammarAccess.getVariableAccess().getIdAssignment(), "rule__Variable__IdAssignment");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdsAssignment_0_1(), "rule__VariableDeclaration__IdsAssignment_0_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdsAssignment_0_2_1(), "rule__VariableDeclaration__IdsAssignment_0_2_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_0_4(), "rule__VariableDeclaration__ExpressionAssignment_0_4");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdsAssignment_1_1(), "rule__VariableDeclaration__IdsAssignment_1_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdsAssignment_1_2_1(), "rule__VariableDeclaration__IdsAssignment_1_2_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_1_3(), "rule__VariableDeclaration__TypeAssignment_1_3");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdsAssignment_2_1(), "rule__VariableDeclaration__IdsAssignment_2_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getIdsAssignment_2_2_1(), "rule__VariableDeclaration__IdsAssignment_2_2_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getTypeAssignment_2_3(), "rule__VariableDeclaration__TypeAssignment_2_3");
			builder.put(grammarAccess.getVariableDeclarationAccess().getExpressionAssignment_2_5(), "rule__VariableDeclaration__ExpressionAssignment_2_5");
			builder.put(grammarAccess.getReturnStatementAccess().getExpressionAssignment_1(), "rule__ReturnStatement__ExpressionAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyGoGrammarAccess grammarAccess;

	@Override
	protected InternalMyGoParser createParser() {
		InternalMyGoParser result = new InternalMyGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyGoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyGoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
